<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>macOS Hook 系统调用</title>
    <url>/2023/0676d00749.html</url>
    <content><![CDATA[<p>基于 Kauth 或者 EndpointSecurity 框架可以监视系统的各类文件、进程事件，在审计后阻断或放通事件的执行。其中基于内核拓展的方案除了可以阻断执行，还可以修改函数调用参数，进行诸如文件保护、网络隔离等操作。</p>
<p>编写内核拓展较为复杂且可能导致系统崩溃等严重后果。Apple 提供了在用户态 hook 函数调用的机制，使用较为方便，称为动态库注入。动态库注入是 dyld 加载器提供的功能，通过修改环境变量<code>DYLD_INSERT_LIBRARIES</code>可向二进制注入动态库。注入的动态库需实现函数替换，Apple 提供了 <a class="link"   href="https://opensource.apple.com/source/dyld/dyld-210.2.3/include/mach-o/dyld-interposing.h" >dyld-interposing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 方法，使用如下。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DYLD_INTERPOSE</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DYLD_INTERPOSE(_replacement,_replacee) \</span></span><br><span class="line"><span class="meta">        __attribute__((used)) static struct&#123; const void* replacement; const void* replacee; &#125; _interpose_##_replacee \</span></span><br><span class="line"><span class="meta">        __attribute__ ((section (<span class="string">&quot;__DATA,__interpose&quot;</span>))) = &#123; (const void*)(unsigned long)&amp;_replacement, (const void*)(unsigned long)&amp;_replacee &#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>该段宏定义的目的是修改 MachO 文件的 DATA 区的 interpose 字段，目的是将原始函数的地址替换为自定义函数地址，dyld 在加载动态库时对该地址进行替换。如这里对进程执行的系统调用<code>execve</code>和<code>posix_spawn</code>进行替换，将映像更换为 echo，读者可自行查看是否完成替换。注意，调用<code>printf</code>函数不一定可以打印出来，具体原因不太明白，猜测是因为<code>printf</code>属于懒加载函数，注入动态库时该函数地址没有更新，无法调用。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *s_repalce_path = <span class="string">&quot;/bin/echo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fh_execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> *argv, <span class="type">char</span> *<span class="type">const</span> *envp)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[FishHook - execve] pid: %d, process path: %s.&quot;</span>, getpid(), file);</span><br><span class="line">    <span class="keyword">return</span> execve(s_repalce_path, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fh_posix_spawn</span><span class="params">(<span class="type">pid_t</span> *pid, <span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">posix_spawn_file_actions_t</span> *actions, <span class="type">const</span> <span class="type">posix_spawnattr_t</span> *attr, <span class="type">char</span> *<span class="type">const</span> *argv, <span class="type">char</span> *<span class="type">const</span> *envp)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[FishHook - posix_spawn] pid: %d, process path: %s.&quot;</span>, *pid, path);</span><br><span class="line">    <span class="keyword">return</span> posix_spawn(pid, s_repalce_path, actions, attr, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DYLD_INTERPOSE(fh_execve, execve)</span><br><span class="line">DYLD_INTERPOSE(fh_posix_spawn, posix_spawn)</span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，在开启 SIP (System Integrity Protection) 机制的机器上，签名的应用程序可能无法继承该环境变量，原因是内核会进行防止可执行文件被修改的检查，可参考 Apple 官方的 <a class="link"   href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/RuntimeProtections/RuntimeProtections.html" >SIP 指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>hook</tag>
        <tag>interpose</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS xnu execsw 符号或将废弃</title>
    <url>/2023/075ef6acf1.html</url>
    <content><![CDATA[<p>macOS 每次发布新的操作系统版本，其内核 xnu 代码都会有所变化，但<code>execsw</code>符号已经多年没变了。用户态可以通过调用<code>fork</code>+<code>execve</code>或者<code>posix_spawn</code>的方式实现进程创建和执行，对应到内核态实现 Mach-o 文件执行的关键函数为<code>exec_activate_image</code>，相关源码请参考 <a class="link"   href="https://github.com/apple/darwin-xnu/blob/main/bsd/kern/kern_exec.c" >kern_exec.c <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="可执行文件加载分析"><a href="#可执行文件加载分析" class="headerlink" title="可执行文件加载分析"></a>可执行文件加载分析</h3><p><code>exec_activate_image</code>函数部分代码摘抄如下，xnu 版本为[8792.81.2]，最新版本情况可查看 <a class="link"   href="https://github.com/apple-oss-distributions/xnu" >opensource-xnu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。函数起始部分有一些有关加锁的操作，因为在执行映像替换时，要保证当前进程不能被杀死。函数结尾处有调用<code>kauth_authorize_fileop</code>，作用是通知进程执行事件的发生。Kauth 框架包含通知事件 FileOP 域以及授权事件 Vnode 域，这里便是创建通知事件，授权事件的创建在<code>exec_check_permissions</code>函数内，可以看出授权事件创建的时机非常早。<code>encapsulated_binary</code> 标签位置，有一处循环，循环体是<code>execsw</code>结构体数组里的函数地址调用。这里便是 xnu 内核唯一一处使用<code>execsw</code>符号的位置。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">exec_activate_image</span><span class="params">(<span class="keyword">struct</span> image_params *imgp)</span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For exec, the translock needs to be taken on old proc and not</span></span><br><span class="line"><span class="comment">	 * on new shadow proc.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (imgp-&gt;ip_flags &amp; IMGPF_EXEC) &#123;</span><br><span class="line">		p = current_proc();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	error = execargs_alloc(imgp);</span><br><span class="line">	<span class="keyword">if</span> (error) &#123;</span><br><span class="line">		<span class="keyword">goto</span> bad_notrans;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	error = exec_save_path(imgp, imgp-&gt;ip_user_fname, imgp-&gt;ip_seg, &amp;excpath);</span><br><span class="line">	<span class="keyword">if</span> (error) &#123;</span><br><span class="line">		<span class="keyword">goto</span> bad_notrans;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Before we start the transition from binary A to binary B, make</span></span><br><span class="line"><span class="comment">	 * sure another thread hasn&#x27;t started exiting the process.  We grab</span></span><br><span class="line"><span class="comment">	 * the proc lock to check p_lflag initially, and the transition</span></span><br><span class="line"><span class="comment">	 * mechanism ensures that the value doesn&#x27;t change after we release</span></span><br><span class="line"><span class="comment">	 * the lock.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	proc_lock(p);</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;p_lflag &amp; P_LEXIT) &#123;</span><br><span class="line">		error = EDEADLK;</span><br><span class="line">		proc_unlock(p);</span><br><span class="line">		<span class="keyword">goto</span> bad_notrans;</span><br><span class="line">	&#125;</span><br><span class="line">	error = proc_transstart(p, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	proc_unlock(p);</span><br><span class="line">	<span class="keyword">if</span> (error) &#123;</span><br><span class="line">		<span class="keyword">goto</span> bad_notrans;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	error = exec_check_permissions(imgp);</span><br><span class="line">	<span class="keyword">if</span> (error) &#123;</span><br><span class="line">		<span class="keyword">goto</span> bad;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">encapsulated_binary:</span><br><span class="line">	<span class="comment">/* Limit the number of iterations we will attempt on each binary */</span></span><br><span class="line">	<span class="keyword">if</span> (++itercount &gt; EAI_ITERLIMIT) &#123;</span><br><span class="line">		error = EBADEXEC;</span><br><span class="line">		<span class="keyword">goto</span> bad;</span><br><span class="line">	&#125;</span><br><span class="line">	error = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; error == <span class="number">-1</span> &amp;&amp; execsw[i].ex_imgact != <span class="literal">NULL</span>; i++) &#123;</span><br><span class="line">		error = (*execsw[i].ex_imgact)(imgp);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (error) &#123;</span><br><span class="line">		<span class="comment">/* case -1: not claimed: continue */</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">-2</span>:                <span class="comment">/* Encapsulated binary, imgp-&gt;ip_XXX set for next iteration */</span></span><br><span class="line">			<span class="keyword">goto</span> encapsulated_binary;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">-3</span>:                <span class="comment">/* Interpreter */</span></span><br><span class="line">		......</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (error == <span class="number">-1</span>) &#123;</span><br><span class="line">		error = ENOEXEC;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (imgp-&gt;ip_flags &amp; IMGPF_INTERPRET &amp;&amp; ndp-&gt;ni_vp) &#123;</span><br><span class="line">			AUDIT_ARG(vnpath, ndp-&gt;ni_vp, ARG_VNODE2);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Call out to allow 3rd party notification of exec.</span></span><br><span class="line"><span class="comment">		 * Ignore result of kauth_authorize_fileop call.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (kauth_authorize_fileop_has_listeners()) &#123;</span><br><span class="line">			kauth_authorize_fileop(vfs_context_ucred(imgp-&gt;ip_vfs_context),</span><br><span class="line">			    KAUTH_FILEOP_EXEC,</span><br><span class="line">			    (<span class="type">uintptr_t</span>)ndp-&gt;ni_vp, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="execsw-符号含义"><a href="#execsw-符号含义" class="headerlink" title="execsw 符号含义"></a>execsw 符号含义</h3><p><code>execsw</code>符号可在开源代码中找到定义，如下。<code>execsw</code>是结构体常量数组，内部存放了函数地址和函数描述对，因此<code>exec_activate_image</code>函数可以使用循环的方式遍历该数组并调用其存放的函数。这里 Apple 开发者有一句注释，表示当前对该数组是硬编码的，后期会采用链接器集的方式实现，但这么多年来，该数组没有发生过变化，即便是 os14.0 Beta 版本的发布也没有对此进行更新。值得注意的是数组存放的第一个函数地址<code>exec_mach_imgact</code>，这是 Mach-o 格式的可执行文件解析、加载、执行所必经的函数。该函数相当复杂，代码接近千行，本文不对此讨论。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Our image activator table; this is the table of the image types we are</span></span><br><span class="line"><span class="comment"> * capable of loading.  We list them in order of preference to ensure the</span></span><br><span class="line"><span class="comment"> * fastest image load speed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * XXX hardcoded, for now; should use linker sets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execsw</span> &#123;</span></span><br><span class="line">	<span class="type">int</span>(*<span class="type">const</span> ex_imgact)(<span class="keyword">struct</span> image_params *);</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *ex_name;</span><br><span class="line">&#125; <span class="type">const</span> execsw[] = &#123;</span><br><span class="line">	&#123; exec_mach_imgact, <span class="string">&quot;Mach-o Binary&quot;</span> &#125;,</span><br><span class="line">	&#123; exec_fat_imgact, <span class="string">&quot;Fat Binary&quot;</span> &#125;,</span><br><span class="line">	&#123; exec_shell_imgact, <span class="string">&quot;Interpreter Script&quot;</span> &#125;,</span><br><span class="line">	&#123; <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="execsw-改动"><a href="#execsw-改动" class="headerlink" title="execsw 改动"></a>execsw 改动</h3><p>虽然多年来<code>execsw</code>一直是结构体数组，即便 os14 发布也没有改变这一点，但 os14 内核中却不再使用这一看起来至关重要的符号。我们可以使用 ida 逆向内核文件看一下改动。内核文件存放路径为<code>/System/Library/Kernels/kernel</code>，为便于分析，读者可安装 <a class="link"   href="https://developer.apple.com/download/more/" >Kernel Debug Kit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 内核调试工具，从中获取导出符号更多的<code>kernel.development</code>文件进行分析。</p>
<p>下面贴了 os13.4 <code>kernel.development</code>部分逆向汇编代码。这里使用<code>lea</code>指令将<code>execsw</code>符号地址赋值给<code>r12</code>，后面使用<code>call</code>指令调用<code>r12</code>偏移后的地址表示的函数，偏移大小存储在<code>rbx</code>寄存器。在<code>call</code>指令之上，有一处<code>xor</code>指令，将<code>ebx</code>，即<code>rbx</code>低字节进行了清零处理，相当于偏移大小设置为 0，这便表示调用了<code>execsw</code>存储的第一个函数地址：<code>exec_mach_imgact</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 13.4 kernel</span><br><span class="line">__text:FFFFFF8000949243 loc_FFFFFF8000949243:                   ; CODE XREF: _exec_activate_image+45D↑j</span><br><span class="line">__text:FFFFFF8000949243                 mov     r13d, 55h</span><br><span class="line">__text:FFFFFF8000949249                 mov     r15, [rbp+var_60]</span><br><span class="line">__text:FFFFFF800094924D                 cmp     r15d, 2</span><br><span class="line">__text:FFFFFF8000949251                 lea     r12, _execsw</span><br><span class="line">__text:FFFFFF8000949258                 jg      loc_FFFFFF8000949459</span><br><span class="line">__text:FFFFFF800094925E</span><br><span class="line">__text:FFFFFF800094925E loc_FFFFFF800094925E:                   ; CODE XREF: _exec_activate_image+4E0↓j</span><br><span class="line">__text:FFFFFF800094925E                 inc     r15d</span><br><span class="line">__text:FFFFFF8000949261                 xor     ebx, ebx</span><br><span class="line">__text:FFFFFF8000949263                 db      66h, 66h, 66h, 66h, 2Eh</span><br><span class="line">__text:FFFFFF8000949263                 nop     word ptr [rax+rax+00000000h]</span><br><span class="line">__text:FFFFFF8000949270</span><br><span class="line">__text:FFFFFF8000949270 loc_FFFFFF8000949270:                   ; CODE XREF: _exec_activate_image+4D5↓j</span><br><span class="line">__text:FFFFFF8000949270                 mov     rdi, r14</span><br><span class="line">__text:FFFFFF8000949273                 call    qword ptr [rbx+r12]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<p>os14.0 的<code>kernel.development</code>相关位置的汇编代码则不同了，这里直接使用<code>call</code>指令调用了<code>exec_mach_imgact</code>函数，查看<code>execsw</code>符号的交叉引用结果为空。表示虽然<code>execsw</code>符号依然存在，但已经不再使用了，可能不久的将来<code>execsw</code>符号便会成为历史。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 14.0 kernel</span><br><span class="line">__text:FFFFFF8000933E3D loc_FFFFFF8000933E3D:                   ; CODE XREF: _exec_activate_image+4FD↑j</span><br><span class="line">__text:FFFFFF8000933E3D                 mov     rdi, rbx</span><br><span class="line">__text:FFFFFF8000933E40                 call    _exec_mach_imgact</span><br><span class="line">__text:FFFFFF8000933E45                 mov     r13d, eax</span><br><span class="line">__text:FFFFFF8000933E48                 lea     eax, [r13+3]</span><br><span class="line">__text:FFFFFF8000933E4C                 cmp     eax, 3          ; switch 4 cases</span><br><span class="line">__text:FFFFFF8000933E4F                 ja      loc_FFFFFF8000934118 ; jumptable FFFFFF8000933E5C default case</span><br><span class="line">__text:FFFFFF8000933E55                 movsxd  rax, dword ptr [r15+rax*4]</span><br><span class="line">__text:FFFFFF8000933E59                 add     rax, r15</span><br><span class="line">__text:FFFFFF8000933E5C                 jmp     rax             ; switch jump</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>xnu内核</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>xnu</tag>
        <tag>execsw</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 入门之 NavigationSplitView 应用</title>
    <url>/2023/09e9decc83.html</url>
    <content><![CDATA[<p>SwiftUI 于 2019 年度 WWDC 全球开发者大会上发布，它是基于 Swift 建立的声明式框架。初识 SwiftUI 感觉很是怪异，完全依靠编码实现用户界面，没有 Storyboard 所见即所得来的舒适。但真的使用过后，发现 SwiftUI 这种描述式的构建方式非常简洁（Swift 相比于 Objective-C 也更加简洁明了，两者可谓相辅相成），代码量会减少很多。不过 Xcode 上界面预览的支持有点差，很多时候还需要调试后查看编写效果。</p>
<h3 id="NavigationSplitView-基本应用"><a href="#NavigationSplitView-基本应用" class="headerlink" title="NavigationSplitView 基本应用"></a>NavigationSplitView 基本应用</h3><p>在 macOS 上使用 SwiftUI 开发应用，SplitView 可能是最常使用的布局模式之一，大量的系统原生应用（如设置、邮件等）均采用了这种布局方式。<a class="link"   href="https://developer.apple.com/documentation/swiftui/navigationsplitview/" >NavigationSplitView <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是非常方便使用的显示两到三列视图的容器，代码如下。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Two column view</span></span><br><span class="line"><span class="type">NavigationSplitView</span> &#123;</span><br><span class="line">    <span class="comment">// Sidebar</span></span><br><span class="line">&#125; detail: &#123;</span><br><span class="line">    <span class="comment">// Detail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Three column view</span></span><br><span class="line"><span class="type">NavigationSplitView</span> &#123;</span><br><span class="line">  <span class="comment">// Sidebar</span></span><br><span class="line">&#125; content: &#123;</span><br><span class="line">  <span class="comment">// Sub menu</span></span><br><span class="line">&#125; detail: &#123;</span><br><span class="line">  <span class="comment">// Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="NavigationSplitView-应用示例"><a href="#NavigationSplitView-应用示例" class="headerlink" title="NavigationSplitView 应用示例"></a>NavigationSplitView 应用示例</h3><p>NavigationSplitView 一般会搭配 <code>List</code> 使用，以渲染列表视图。如下实现了一个简单的两列视图。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/SwiftUI-SplitView.png"
                      alt="两列 SplitView 视图"
                ><figcaption>两列 SplitView 视图</figcaption></figure></p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EmployeeModel</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> details: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> selectedIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> [<span class="type">EmployeeModel</span>(name: <span class="string">&quot;ZhangSan&quot;</span>, details: <span class="string">&quot;C/C++, Swift&quot;</span>), </span><br><span class="line">                 <span class="type">EmployeeModel</span>(name: <span class="string">&quot;LiSi&quot;</span>, details: <span class="string">&quot;macOS Kernel, objc&quot;</span>),</span><br><span class="line">                 <span class="type">EmployeeModel</span>(name: <span class="string">&quot;WangWu&quot;</span>, details: <span class="string">&quot;Linux, C++&quot;</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationSplitView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(<span class="number">0</span> <span class="operator">..&lt;</span> model.count, id: \.<span class="keyword">self</span>, selection: <span class="variable">$selectedIndex</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(model[index].name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; detail: &#123;</span><br><span class="line">            <span class="type">Text</span>(model[selectedIndex].details)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span> &#123;</span><br><span class="line">    <span class="type">ContentView</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先定义了数据结构为结构体数组，然后使用 <code>List</code> 遍历该数组显示所有项目。这里 <code>id: \.self</code> 表示使用变量自身作为列表元素的标识符，以便于系统正确管理列表数据。另外使用 <code>@State</code> 声明了一个表示用户选择索引的变量 <code>selectedIndex</code>，并在使用 List 遍历时将其绑定到当前列表。这样每次用户选择列表某一行，将触发 <code>selectedIndex</code> 更新，进而重新渲染视图。<code>@State</code> 是一种属性包装器，这里不做具体解释。</p>
<h3 id="NavigationSplitView-嵌套-Section"><a href="#NavigationSplitView-嵌套-Section" class="headerlink" title="NavigationSplitView 嵌套 Section"></a>NavigationSplitView 嵌套 Section</h3><p>有些时候可能会有将相关联的项目分组显示的场景，那么可以在 <code>List</code> 中使用 <code>Section</code> 或 <code>Group</code> 等容器，而不要嵌套使用 <code>List</code>。那么这里将代码改动一下，使用 <code>Section</code> 进行分组显示，并使用 <code>ForEach</code> 将每一个元素插入列表。详细视图这里暂不处理。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> selectedIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> [[<span class="type">EmployeeModel</span>(name: <span class="string">&quot;ZhangSan&quot;</span>, details: <span class="string">&quot;C/C++, Swift&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;LiSi&quot;</span>, details: <span class="string">&quot;macOS Kernel, objc&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;WangWu&quot;</span>, details: <span class="string">&quot;Linux, C++&quot;</span>)],</span><br><span class="line">                 [<span class="type">EmployeeModel</span>(name: <span class="string">&quot;SuSan&quot;</span>, details: <span class="string">&quot;C/C++, Swift&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;LiSi&quot;</span>, details: <span class="string">&quot;macOS Kernel, objc&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;WangWu&quot;</span>, details: <span class="string">&quot;Linux, C++&quot;</span>)]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationSplitView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(<span class="number">0</span> <span class="operator">..&lt;</span> model.count, id: \.<span class="keyword">self</span>, selection: <span class="variable">$selectedIndex</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                <span class="type">Section</span>(<span class="string">&quot;Section <span class="subst">\(index)</span>&quot;</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(<span class="number">0</span> <span class="operator">..&lt;</span> model[index].count, id: \.<span class="keyword">self</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Text</span>(model[index][i].name)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; detail: &#123;</span><br><span class="line"><span class="comment">//            Text(model[selectedIndex].details)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>奇怪的现象发生了，如下图，当我们选择某个组的其中一项时，会发现其他组的同位置项也被选中了。这是因为系统将不同 <code>Section</code> 中的同位置项目当成了一个，毕竟我们要求系统以变量自身作为列表元素的标识符，这里系统可能是以元素在 <code>Section</code> 中的顺序作为标识符。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/SwiftUI-Sidebar-abnormal.png"
                      alt="侧边栏索引异常"
                ><figcaption>侧边栏索引异常</figcaption></figure></p>
<p>修复该问题也很简单，自定义不会重复的标识符即可。可以显式指定 <code>Text</code> 的 <code>tag</code>，使得标识不会重复，这样用户选择列表元素时就不会单击选中多个。需要注意的是，这里的 <code>tag</code> 就是 <code>selectedIndex</code>，所以在详细视图处理时需要将其转化为正确的索引量。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> selectedIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> [[<span class="type">EmployeeModel</span>(name: <span class="string">&quot;ZhangSan&quot;</span>, details: <span class="string">&quot;C/C++, Swift&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;LiSi&quot;</span>, details: <span class="string">&quot;macOS Kernel, objc&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;WangWu&quot;</span>, details: <span class="string">&quot;Linux, C++&quot;</span>)],</span><br><span class="line">                 [<span class="type">EmployeeModel</span>(name: <span class="string">&quot;SuSan&quot;</span>, details: <span class="string">&quot;C/C++, Swift&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;LiSi&quot;</span>, details: <span class="string">&quot;macOS Kernel, objc&quot;</span>),</span><br><span class="line">                  <span class="type">EmployeeModel</span>(name: <span class="string">&quot;WangWu&quot;</span>, details: <span class="string">&quot;Linux, C++&quot;</span>)]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationSplitView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(<span class="number">0</span> <span class="operator">..&lt;</span> model.count, id: \.<span class="keyword">self</span>, selection: <span class="variable">$selectedIndex</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                <span class="type">Section</span>(<span class="string">&quot;Section <span class="subst">\(index)</span>&quot;</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(<span class="number">0</span> <span class="operator">..&lt;</span> model[index].count, id: \.<span class="keyword">self</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">                        <span class="keyword">let</span> tag <span class="operator">=</span> index <span class="operator">==</span> <span class="number">0</span> <span class="operator">?</span> i : model[index].count <span class="operator">+</span> i</span><br><span class="line">                        <span class="type">Text</span>(model[index][i].name)</span><br><span class="line">                            .tag(tag)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; detail: &#123;</span><br><span class="line">            <span class="keyword">let</span> sectionIndex <span class="operator">=</span> selectedIndex <span class="operator">&gt;=</span> model[<span class="number">0</span>].count <span class="operator">?</span> <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> itemIndex <span class="operator">=</span> sectionIndex <span class="operator">==</span> <span class="number">0</span> <span class="operator">?</span> selectedIndex : selectedIndex <span class="operator">-</span> model[<span class="number">0</span>].count</span><br><span class="line">            <span class="type">Text</span>(model[sectionIndex][itemIndex].details)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/SwiftUI-Sidebar-normal.png"
                      alt="侧边栏索引正常"
                ><figcaption>侧边栏索引正常</figcaption></figure></p>
]]></content>
      <categories>
        <category>SwiftUI</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>NavigationSplitView</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 修改 MachO 文件实现动态库注入（三）</title>
    <url>/2023/06b81ddf97.html</url>
    <content><![CDATA[<p>前面讲到如何新增一条<code>LC_LOAD_DYLIB</code>指令到二进制，以注入动态库。这种方式有一定的局限性，因为注入的前提是由于 Segment 及 Section 间的内存对齐，存在足够的空白空间可以插入一条动态库依赖指令。如果没有足够的空白空间，则强制添加指令会导致代码段（__text）被覆盖，进而造成二进制打不开或者行为异常的现象。Google Chrome 及 Microsoft Edge 浏览器 Bundle 内的二进制很多没有足够的空白空间，读者可自行验证。</p>
<h3 id="系统库替换优势"><a href="#系统库替换优势" class="headerlink" title="系统库替换优势"></a>系统库替换优势</h3><p>那么如果没有足够的空白空间插入新的指令，如何注入动态库？一种比较麻烦的方法是人为构造空白空间：将代码段及其后的二进制数据进行后移，增大二进制的文件大小，以留出足够的空间。这种方法难度大，二进制数据偏移后还须进行修正，如各个 Segment 和 Section 的起始地址、二进制中表示函数或者其他数据地址的数据、二进制中表示地址偏移的数据等。有的 Section 数据需要修正，有的不需要；某些 Section 部分数据需要修正，部分不需要；某些表示偏移大小的数据（需要注意的是这种数据是以 uleb128 进行编码存储的）修正后其占用的空间变大了，还须单独修正。这里不展开说了。</p>
<p>还有一种更为简单的方法：替换<code>libSystem.B.dylib</code>依赖库。在 macOS 上，基本所有的 Mach-o 文件均会依赖<code>libSystem.B.dylib</code>，那么如果把依赖该动态库的加载指令修改为依赖我们自定义的动态库，就不必关心空白空间是否足够了。这需要注意两点：</p>
<blockquote>
<p>1 自定义的依赖库路径不能过长；<br>2 原二进制所使用的来自 libSystem.B.dylib 的符号需要自定义的依赖库导出。</p>
</blockquote>
<h3 id="系统库替换实现"><a href="#系统库替换实现" class="headerlink" title="系统库替换实现"></a>系统库替换实现</h3><p>第一点目的是避免麻烦。因为字节对齐的原因，<code>/usr/lib/libSystem.B.dylib</code>路径会占用 32 个字节，如下图所示。所以自定义的依赖库路径长度不要大于 31 字节，否则需要对后续二进制内容进行偏移。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Interpose-libSystem.B.dylib.png"
                      alt="libSystem.B.dylib占用空间"
                ><figcaption>libSystem.B.dylib占用空间</figcaption></figure></p>
<p>修改后的二进制依赖库情况如下图，注入的动态库路径为<code>/usr/local/lib/libinject.dylib</code>，路径长度是 30 字节。这里所举例的二进制只有一个依赖库，那么注入后能否运行？如果你编写的 demo 非常简单，简单到没有依赖<code>libSystem.B.dylib</code>的任何符号，那么即使<code>libinject.dylib</code>是个空壳动态库，修改后的二进制也是可以直接运行的。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Interpose-libinject.dylib.png"
                      alt="libSystem.B.dylib加载指令修改后状态"
                ><figcaption>libSystem.B.dylib加载指令修改后状态</figcaption></figure></p>
<p>如果修改的二进制比较复杂，那么修改后直接运行该二进制会崩溃，错误信息如下。日志很直白，<code>dyld</code>在链接阶段寻找<code>helloWorld-mod</code>引用的符号<code>_printf</code>，在依赖库<code>libinject.dylib</code>中没有找到。当然是找不到的，因为<code>_printf</code>符号并不在<code>libinject.dylib</code>导出符号里。这个符号本来是<code>libSystem.B.dylib</code>提供的，但因为我们把依赖库修改了，所以链接器不会去<code>libSystem.B.dylib</code>中查找。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  Debug ./helloWorld-mod</span><br><span class="line">dyld[10541]: Symbol not found: _printf</span><br><span class="line">  Referenced from: &lt;9562BD19-769A-3AC8-83FD-7912CDB97807&gt; /Users/....../Build/Products/Debug/helloWorld-mod</span><br><span class="line">  Expected in:     &lt;499C61D6-3325-3E7F-915E-30E2A609A84B&gt; /usr/local/lib/libinject.dylib</span><br><span class="line">[1]    10541 abort      ./helloWorld-mod</span><br></pre></td></tr></table></figure></div>

<p>这就是第二点的注意事项，二进制引用的<code>libSystem.B.dylib</code>的导出符号需要我们自定义的动态库提供。如果修改的二进制的引用符号很简单，直接自己实现一份也可以。但如果引用符号很多，成百上千，而且符号的原型、作用也不清楚，那么只能想办法使用<code>libSystem.B.dylib</code>的导出符号。可执行文件依赖的系统动态库被修改为自定义的动态库<code>libinject.dylib</code>后，如果还想使用<code>libSystem.B.dylib</code>的导出符号，就需要在<code>dyld</code>链接<code>libinject.dylib</code>的时候去链接<code>libSystem.B.dylib</code>。这是完全可行的，因为不止可执行文件，动态库也会依赖<code>libSystem.B.dylib</code>，如下。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ otool -L /usr/local/lib/libinject.dylib</span><br><span class="line">/usr/local/lib/libinject.dylib:</span><br><span class="line">	/usr/local/lib/libinject.dylib (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1336.0.0)</span><br></pre></td></tr></table></figure></div>

<p>所以<code>libinject.dylib</code>可以间接导出符号，即导出的符号自身没有实现，依赖其他库实现。<code>clang</code>编译器可以使用参数<code>exported_symbols_list</code>指定导出符号表，比如这里我们需要<code>libinject.dylib</code>导出<code>_printf</code>符号，可以使用如下命令实现。如需依赖其他库或者符号，可自行添加。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ touch symbols.txt</span><br><span class="line">➜  ~ echo _printf &gt; ./symbols.txt</span><br><span class="line">➜  ~ clang -dynamiclib -o libinject.dylib -exported_symbols_list ./symbols.txt ./inject.c -lSystem.B</span><br></pre></td></tr></table></figure></div>

<p>此时查看<code>libinject.dylib</code>的导出符号，可以发现<code>_printf</code>符号已被导出。这时再次运行被修改的二进制则可以正常运行。这里使用<code>nm</code>命令打印二进制的引用或导出符号，<code>from libSystem</code>表示符号来源为<code>libSystem.B.dylib</code>，<code>indirect</code>表示符号是间接引用或导出的。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ nm -m ./libinject.dylib</span><br><span class="line">                 (undefined) external _printf (from libSystem)</span><br><span class="line">                 (indirect) external _printf (for _printf)</span><br><span class="line"></span><br><span class="line">➜  ~ mv ./libinject.dylib /usr/local/lib</span><br><span class="line">➜  ~ ./helloWorld-mod</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></div>

<h3 id="符号搜集代码"><a href="#符号搜集代码" class="headerlink" title="符号搜集代码"></a>符号搜集代码</h3><p>读者可自行查看系统二进制的引用符号，如<code>zsh</code>等，其引用及导出符号相当可观，大部分的引用符号来源<code>libSystem.B.dylib</code>。那么这类二进制修改系统依赖库为自定义动态库，自定义依赖库就需要导出大量符号。如果我将<code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code>等系统目录下的所有的可执行文件都注入一遍，需要解决多少<code>libSystem.B.dylib</code>导出符号？大概是 2900+。如果纯靠人工搜集符号，过于浪费时间，可使用如下<code>python</code>脚本搜集符号。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_macho_executable</span>(<span class="params">file_path</span>):</span><br><span class="line">    output = subprocess.check_output([<span class="string">&#x27;file&#x27;</span>, file_path]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Mach-O&#x27;</span> <span class="keyword">in</span> output <span class="keyword">and</span> <span class="string">&#x27;executable&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_symbols</span>(<span class="params">binary_path, x86_symbol_file_path, arm_symbol_file_path</span>):</span><br><span class="line">    nm_output = subprocess.check_output([<span class="string">&#x27;nm&#x27;</span>, <span class="string">&#x27;-m&#x27;</span>, binary_path])</span><br><span class="line">    x86_symbols = <span class="built_in">set</span>()</span><br><span class="line">    arm_symbols = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    lines = nm_output.decode().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    size = <span class="built_in">len</span>(lines)</span><br><span class="line">    <span class="keyword">while</span> i &lt; size:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27; (for architecture x86_64)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; size <span class="keyword">and</span> <span class="string">&#x27; architecture&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                    symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                    x86_symbols.add(symbol)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27; (for architecture arm64e)&#x27;</span> <span class="keyword">in</span> lines[i] <span class="keyword">or</span> <span class="string">&#x27; (for architecture arm64)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; size <span class="keyword">and</span> <span class="string">&#x27; architecture&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                    symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                    arm_symbols.add(symbol)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                x86_symbols.add(symbol)</span><br><span class="line">                arm_symbols.add(symbol)</span><br><span class="line"></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(x86_symbol_file_path, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        existing_symbols = <span class="built_in">set</span>(line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">        new_symbols = existing_symbols | x86_symbols</span><br><span class="line">        f.seek(<span class="number">0</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">sorted</span>(new_symbols):</span><br><span class="line">            f.write(line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(arm_symbol_file_path, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        existing_symbols = <span class="built_in">set</span>(line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">        new_symbols =  existing_symbols | arm_symbols</span><br><span class="line">        f.seek(<span class="number">0</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">sorted</span>(new_symbols):</span><br><span class="line">            f.write(line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage: python collect_symbols.py &lt;binary_path&gt; &lt;x86_symbol_file_path&gt; &lt;arm_symbol_file_path&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    x86_symbol_file_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">    arm_symbol_file_path = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                binary_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">if</span> is_macho_executable(binary_path):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;dump symbols for file &quot;</span>, binary_path)</span><br><span class="line">                    collect_symbols(binary_path, x86_symbol_file_path, arm_symbol_file_path)</span><br><span class="line">    <span class="keyword">elif</span> is_macho_executable(path):</span><br><span class="line">        collect_symbols(path, x86_symbol_file_path, arm_symbol_file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid binary path&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>interpose</tag>
        <tag>Mach-o</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 修改 Mach-o 文件实现动态库注入（一）</title>
    <url>/2023/0686aa5ea2.html</url>
    <content><![CDATA[<p><a href="https://conradsun.github.io/2023/0676d00749.html">前面</a> 已经提到可以通过修改环境变量<code>DYLD_INSERT_LIBRARIES</code>注入动态库，但这种方法具有一定的局限性，在开启 SIP 的机器上，应用程序可能无法继承该环境变量，导致注入失败。那么有没有局限性更小的注入方法？本文所展示的代码片段来自开源项目 <a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，更多细节可参考该项目。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>可以找个 Mach-o (Mach Object File Format)文件先分析一下。和 Linux 系统上的 ELF (Extensible Firmware Interface)、Windows 系统上的 PE (Portable Executable) 文件相比，Mach-o 文件结构大体与之类似，可分为 Header、Segment、Section 等部分，使用 <a class="link"   href="https://sourceforge.net/projects/machoview/" >MachOView <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 工具可以方便查看二进制内容。</p>
<p>Mach-o 文件可分为瘦二进制和胖二进制（Fat Binary），即支持多处理器架构的二进制文件，使用<code>file</code>命令可查看文件支持的架构，如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ file /usr/bin/python3</span><br><span class="line">/usr/bin/python3: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64</span><br><span class="line">- Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e</span><br><span class="line">- Mach-O 64-bit executable arm64e]</span><br><span class="line">/usr/bin/python3 (for architecture x86_64):	Mach-O 64-bit executable x86_64</span><br><span class="line">/usr/bin/python3 (for architecture arm64e):	Mach-O 64-bit executable arm64e</span><br></pre></td></tr></table></figure></div>

<p>本文不涉及胖二进制的分析修改，先分析单二进制文件如何修改并注入。有关 Mach-o 文件格式的讲解请自行百度&#x2F;谷歌。如下图是一个简单的仅支持 x86_64 架构的 Mach-o 文件格式。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-helloWorld.png"
                      alt="单架构Mach-o文件格式"
                ><figcaption>单架构Mach-o文件格式</figcaption></figure></p>
<p>需要关注的是 Load Commands 指令加载部分。其中<code>LC_LOAD_DYLIB</code>指令表示该二进制依赖的动态库信息，如所有二进制均依赖的动态库 libSystem.B.dylib 就在其中。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-libSystem.B.dylib.png"
                      alt="libSystem.B.dylib加载指令"
                ><figcaption>libSystem.B.dylib加载指令</figcaption></figure></p>
<p>那么如果注入动态库就需要修改 Load Commands，添加一条<code>LC_LOAD_DYLIB</code>的指令，将待添加的动态库名称填入。需要特别注意的是，添加的指令区域必须是该二进制的空白区。因为内存对齐的原因，每个 Segment 之间会有一段空白区，添加的指令内容需写到 Load Commands 最后一条指令之后、TEXT Section 之前的区域。多数情况下这部分区域是足够容纳要添加的内容的，如果不够则不能写入。</p>
<h3 id="动态库注入分析"><a href="#动态库注入分析" class="headerlink" title="动态库注入分析"></a>动态库注入分析</h3><p>在进行注入前首先需要判断文件格式，是否为可执行文件、是否为胖二进制，进一步分析是 64bit 还是 32bit 可执行文件。代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">signAdhoc</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> task <span class="operator">=</span> <span class="type">Process</span>()</span><br><span class="line">    task.executableURL <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: <span class="string">&quot;/usr/bin/codesign&quot;</span>)</span><br><span class="line">    task.arguments <span class="operator">=</span> [<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;-&quot;</span>, binaryPath]</span><br><span class="line">    <span class="keyword">try?</span> task.run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">initWithFile</span>(<span class="params">filePath</span>: <span class="type">String</span>, <span class="params">libPath</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span><span class="type">FileManager</span>.default.isExecutableFile(atPath: filePath) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;File to be modified is not Executable.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">FileManager</span>.default.contents(atPath: filePath) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to obtain contents for file.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binaryPath <span class="operator">=</span> filePath</span><br><span class="line">    dylibPath <span class="operator">=</span> libPath</span><br><span class="line">    machOData <span class="operator">=</span> data</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">repackBinary</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> machOData.isEmpty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> machOData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: fat_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to get fat header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>, <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            result <span class="operator">=</span> processThinMachO(offset: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signAdhoc()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里的<code>signAdhoc</code>是为了给修改后的二进制签名，因为修改后二进制的内容发生了更改，不重新签名校验无法通过，系统会禁止执行。进行二进制注入的关键代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">injectDylib</span>(<span class="params">header</span>: mach_header, <span class="params">offset</span>: <span class="type">UInt64</span>, <span class="params">is64bit</span>: <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> fileHandle <span class="operator">=</span> <span class="type">FileHandle</span>(forWritingAtPath: binaryPath) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to create handler for binary file.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pathSize <span class="operator">=</span> (dylibPath.count <span class="operator">&amp;</span> <span class="operator">~</span>(pathPadding <span class="operator">-</span> <span class="number">1</span>)) <span class="operator">+</span> pathPadding</span><br><span class="line">    <span class="keyword">let</span> cmdSize <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size <span class="operator">+</span> pathSize</span><br><span class="line">    <span class="keyword">var</span> cmdOffset: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dylibCmd <span class="operator">=</span> dylib_command()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is64bit &#123;</span><br><span class="line">        cmdOffset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">UInt64</span>(<span class="type">MemoryLayout</span>&lt;mach_header_64&gt;.size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cmdOffset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">UInt64</span>(<span class="type">MemoryLayout</span>&lt;mach_header&gt;.size)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dylibCmd.cmd <span class="operator">=</span> <span class="type">UInt32</span>(<span class="type">LC_LOAD_DYLIB</span>)</span><br><span class="line">    dylibCmd.cmdsize <span class="operator">=</span> <span class="type">UInt32</span>(cmdSize)</span><br><span class="line">    dylibCmd.dylib.name <span class="operator">=</span> lc_str(offset: <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try?</span> fileHandle.seek(toOffset: cmdOffset <span class="operator">+</span> <span class="type">UInt64</span>(header.sizeofcmds))</span><br><span class="line">    fileHandle.write(<span class="type">Data</span>(bytes: <span class="operator">&amp;</span>dylibCmd, count: <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size))</span><br><span class="line">    fileHandle.write(dylibPath.data(using: .utf8)<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newHeader <span class="operator">=</span> header</span><br><span class="line">    newHeader.ncmds <span class="operator">=</span> newHeader.ncmds <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    newHeader.sizeofcmds <span class="operator">=</span> newHeader.sizeofcmds <span class="operator">+</span> <span class="type">UInt32</span>(cmdSize)</span><br><span class="line">    <span class="keyword">try?</span> fileHandle.seek(toOffset: offset)</span><br><span class="line">    fileHandle.write(<span class="type">Data</span>(bytes: <span class="operator">&amp;</span>newHeader, count: <span class="type">MemoryLayout</span>&lt;mach_header&gt;.size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try?</span> fileHandle.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">processThinMachO</span>(<span class="params">offset</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> thinData <span class="operator">=</span> machOData.advanced(by: offset)</span><br><span class="line">    <span class="keyword">return</span> thinData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: mach_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to get mach header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>:</span><br><span class="line">            <span class="keyword">return</span> injectDylib(header: header.pointee, offset: <span class="type">UInt64</span>(offset), is64bit: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            <span class="keyword">return</span> injectDylib(header: header.pointee, offset: <span class="type">UInt64</span>(offset), is64bit: <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>processThinMachO</code>仅分析二进制的格式是 64bit 还是 32bit，<code>injectDylib</code>用于添加依赖库。首先生成了<code>dylibCmd</code>动态库加载指令，指令中的<code>cmdsize</code>对 dylib 的路径长度进行了 8 字节对齐取整。指令插入的位置为 Header+CmdsSize 之后，即 Load Commands 最后一条指令之后，这里没有判断是否可以插入。注意，还需要修改 Header 中的指令数量和大小信息，不然新增的指令不会被解析。</p>
<p>修改完成后，修改后的文件直接覆盖原文件，所以测试前请将原文件备份。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>interpose</tag>
        <tag>Mach-o</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 修改 MachO 文件实现动态库注入（二）</title>
    <url>/2023/06f5037cc5.html</url>
    <content><![CDATA[<p><a href="https://conradsun.github.io/2023/0686aa5ea2.html">前面</a> 讲解了修改单架构二进制文件实现动态库注入，本篇继续讲解修改胖二进制文件实现动态库注入。注入方式并无不同，不过需要注意修改文件时的地址偏移，否则修改错误会导致文件无法解析。本文所展示的代码片段来自开源项目 <a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，更多细节可参考该项目。</p>
<p>如下图，胖二进制包含多种 CPU 架构，一般是 X86_64 和 ARM64，胖二进制相当于多个单二进制的组合体。使用系统自带的工具<code>lipo</code>可以添加、提取、删除以及替换胖二进制中的某个架构的二进制，这里不多做介绍。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-Fat.png"
                      alt="胖二进制格式"
                ><figcaption>胖二进制格式</figcaption></figure></p>
<p>修改胖二进制首先需要解析 Fat Header，通过文件头获取所支持的架构数量及各架构描述内容的偏移地址。注意，获取数据时根据机器的大端&#x2F;小端模式不同，需要对数据进行处理。一般 PC 机都是小端模式，因此需要将高低位地址上的数据进行交换。多架构二进制的修改直接复用了单架构的代码，<code>processThinMachO</code>相关代码请参考上文或 <a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 项目。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">repackBinary</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> machOData.isEmpty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> machOData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: fat_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get fat header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> offset <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;fat_header&gt;.size</span><br><span class="line">        <span class="keyword">let</span> archNum <span class="operator">=</span> _OSSwapInt32(header.pointee.nfat_arch)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">FAT_MAGIC</span>, <span class="type">FAT_CIGAM</span>:</span><br><span class="line">            <span class="keyword">if</span> archNum <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Format of Fat-MachO is invalid.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> archNum &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    offset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;fat_arch&gt;.size</span><br><span class="line">                &#125;</span><br><span class="line">                result <span class="operator">=</span> processFatMachO(offset: offset)</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>result &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>, <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            result <span class="operator">=</span> processThinMachO(offset: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signAdhoc()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">processFatMachO</span>(<span class="params">offset</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fatData <span class="operator">=</span> machOData.advanced(by: offset)</span><br><span class="line">    <span class="keyword">return</span> fatData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> arch <span class="operator">=</span> pointer.bindMemory(to: fat_arch.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get fat arch pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> offset <span class="operator">=</span> _OSSwapInt32(arch.pointee.offset)</span><br><span class="line">        <span class="keyword">return</span> processThinMachO(offset: <span class="type">Int</span>(offset))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上文提到，在插入动态库注入指令时并没有判断是否有足够的空白区域容纳，如果空间不足，插入会覆盖有效数据，进而导致二进制格式错误。插入空间判断代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">isSpaceEnough</span>(<span class="params">header</span>: mach_header, <span class="params">offset</span>: <span class="type">Int</span>, <span class="params">is64bit</span>: <span class="type">Bool</span>) -&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pathSize <span class="operator">=</span> (dylibPath.count <span class="operator">&amp;</span> <span class="operator">~</span>(pathPadding <span class="operator">-</span> <span class="number">1</span>)) <span class="operator">+</span> pathPadding</span><br><span class="line">    <span class="keyword">let</span> injectSpace <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size <span class="operator">+</span> pathSize</span><br><span class="line">    <span class="keyword">let</span> headerSize <span class="operator">=</span> is64bit <span class="operator">?</span> <span class="type">MemoryLayout</span>&lt;mach_header_64&gt;.size : <span class="type">MemoryLayout</span>&lt;mach_header&gt;.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> segOffset <span class="operator">=</span> offset</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> header.ncmds &#123;</span><br><span class="line">        <span class="keyword">let</span> segData <span class="operator">=</span> machOData.subdata(in: segOffset<span class="operator">..&lt;</span>segOffset<span class="operator">+</span><span class="type">MemoryLayout</span>&lt;segment_command_64&gt;.size)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> segCmd <span class="operator">=</span> getSegmentCommand(data: segData) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get segment command pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> segName <span class="operator">=</span> segCmd.segname</span><br><span class="line">        <span class="keyword">if</span> (strncmp(<span class="operator">&amp;</span>segName.<span class="number">0</span>, <span class="string">&quot;__TEXT&quot;</span>, <span class="number">15</span>) <span class="operator">==</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> segCmd.nsects &#123;</span><br><span class="line">                <span class="keyword">let</span> sectOffset <span class="operator">=</span> segOffset <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;segment_command_64&gt;.size <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;section_64&gt;.size <span class="operator">*</span> <span class="type">Int</span>(i)</span><br><span class="line">                <span class="keyword">let</span> sectData <span class="operator">=</span> machOData.subdata(in: sectOffset<span class="operator">..&lt;</span>sectOffset<span class="operator">+</span><span class="type">MemoryLayout</span>&lt;section_64&gt;.size)</span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> sectCmd <span class="operator">=</span> getSectionCommand(data: sectData) <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get section pointer.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> sectName <span class="operator">=</span> sectCmd.sectname</span><br><span class="line">                <span class="keyword">if</span> (strncmp(<span class="operator">&amp;</span>sectName.<span class="number">0</span>, <span class="string">&quot;__text&quot;</span>, <span class="number">15</span>) <span class="operator">==</span> <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> space <span class="operator">=</span> sectCmd.offset <span class="operator">-</span> header.sizeofcmds <span class="operator">-</span> <span class="type">UInt32</span>(headerSize)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO] Available space is <span class="subst">\(space<span class="operator">/</span><span class="number">8</span>)</span> bytes.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> space <span class="operator">&gt;</span> injectSpace</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            segOffset <span class="operator">=</span> segOffset <span class="operator">+</span> <span class="type">Int</span>(segCmd.cmdsize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>基本原理是查找到代码段（__text）偏移地址，然后分析该地址前是否有足够空间，读者可结合二进制格式进行代码阅读，这里不再注解。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>interpose</tag>
        <tag>Mach-o</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 内核拓展与用户态进程的通信实现（一）</title>
    <url>/2023/06a9b0ec68.html</url>
    <content><![CDATA[<p>macOS 内核拓展与用户态进程通信基本依靠 <a class="link"   href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/NKEConceptual/control/control.html#//apple_ref/doc/uid/TP40001858-CH227-DontLinkElementID_35" >KernControl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> API 及 <a class="link"   href="https://developer.apple.com/documentation/kernel/iokit_fundamentals" >IOKit Fundamentals <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 框架。kern_control API 对 socket 进行简单封装，用户态进程调用<code>connect</code>建立与内核的通信机制。IOKit 则不仅提供用户态通信接口，实际上 IOKit 提供所有内核驱动的管控能力，包含驱动的注册、资源管理和调试等。</p>
<h3 id="KernControl-内核编程"><a href="#KernControl-内核编程" class="headerlink" title="KernControl 内核编程"></a>KernControl 内核编程</h3><p>内核拓展需调用<code>ctl_register</code>进行控制器的注册。函数原型为：<code>errno_t ctl_register(struct kern_ctl_reg *userkctl, kern_ctl_ref *kctlref);</code>。其中<code>userkctl</code>存放控制器相关配置，<code>kctlref</code>用于后续的消息发送和最后的控制器注销。消息传输调用<code>ctl_enqueuedata</code>实现，函数原型为<code>errno_t ctl_enqueuedata(kern_ctl_ref kctlref, u_int32_t unit, void *data, size_t len, u_int32_t flags);</code>。需要注意的是数据传输使用到的<code>unit</code>需在连接建立时获取，详见下面<code>kext_connect</code>函数实现。<br><code>kern_ctl_reg</code>结构体包含数据分发相关的函数指针，需自行实现。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Kext管控运行时环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kern_ctl_reg</span> <span class="title">kctl_register</span>;</span>      <span class="comment">// kext注册器</span></span><br><span class="line">    kern_ctl_ref kctl_refrance;             <span class="comment">// kext注册引用</span></span><br><span class="line">    <span class="type">uint8_t</span> kext_unit;                      <span class="comment">// kext单元号</span></span><br><span class="line">    <span class="type">bool</span> is_connected;                      <span class="comment">// kext连接状态</span></span><br><span class="line">&#125; KextControlEnv;</span><br><span class="line">KextControlEnv g_kext_ctl;                      <span class="comment">// 内核拓展控制器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   kext控制器初始化</span></span><br><span class="line"><span class="comment"> * @return  错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_control_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> error = KERN_SUCCESS;</span><br><span class="line">    bzero(&amp;g_kext_ctl, <span class="keyword">sizeof</span>(KextControlEnv));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化kext管控参数</span></span><br><span class="line">    strlcpy(g_kext_ctl.kctl_register.ctl_name, <span class="string">&quot;your kext name&quot;</span>, MAX_KCTL_NAME);</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_flags = CTL_FLAG_PRIVILEGED;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_send = kext_send;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_getopt = sock_get_opt;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_setopt = sock_set_opt;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_connect = kext_connect;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_disconnect = kext_disconnect;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册kext控制器</span></span><br><span class="line">    error = ctl_register(&amp;g_kext_ctl.kctl_register, &amp;g_kext_ctl.kctl_refrance);</span><br><span class="line">    <span class="keyword">if</span> (error != KERN_SUCCESS) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to register kext controller with error code [%d].&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   kext控制器反初始化</span></span><br><span class="line"><span class="comment"> * @return  错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_control_uninit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> error = KERN_SUCCESS;</span><br><span class="line"></span><br><span class="line">    error = ctl_deregister(g_kext_ctl.kctl_refrance);</span><br><span class="line">    <span class="keyword">if</span> (error != KERN_SUCCESS) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to deregister kext controller with error code [%d].&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端设置配置回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @param command   操作标志</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">sock_set_opt</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *info, <span class="type">int</span> command, <span class="type">void</span> *data, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> err_code = KERN_SUCCESS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端获取配置回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @param opt       操作标志</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">sock_get_opt</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *userdata, <span class="type">int</span> opt, <span class="type">void</span> *data, <span class="type">size_t</span> *len)</span> &#123;</span><br><span class="line">    <span class="comment">// 可不用实现</span></span><br><span class="line">    <span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端连接回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param sac       套接字地址控制器</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_connect</span><span class="params">(kern_ctl_ref ctlref, <span class="keyword">struct</span> sockaddr_ctl *sac, <span class="type">void</span> **unitinfo)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> err_code = KERN_SUCCESS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_kext_ctl.is_connected == <span class="literal">true</span>) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to accept the connection request for a connection already established.&quot;</span>);</span><br><span class="line">        err_code = EISCONN;</span><br><span class="line">        <span class="keyword">return</span> err_code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_kext_ctl.is_connected = <span class="literal">true</span>;</span><br><span class="line">    g_kext_ctl.kext_unit = sac-&gt;sc_unit;</span><br><span class="line">    LOG_C(LOG_INFO, <span class="string">&quot;Connect with client successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端断开连接回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_disconnect</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *unitinfo)</span> &#123;</span><br><span class="line">    g_kext_ctl.is_connected = <span class="literal">false</span>;</span><br><span class="line">    LOG_C(LOG_INFO, <span class="string">&quot;Disconnect with peer successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="KernControl-用户态编程"><a href="#KernControl-用户态编程" class="headerlink" title="KernControl 用户态编程"></a>KernControl 用户态编程</h3><p>用户态进程仅需调用<code>connect</code>函数发起连接，代码如下。OS X 专门为内核通信定义了<code>PF_SYSTEM</code>域，该域支持<code>SYSPROTO_CONTROL</code>和<code>SYSPROTO_EVENT</code>两个协议。使用<code>SYSPROTO_CONTROL</code>协议的内核控制（kern_control）API 允许应用程序配置和控制 KEXT。使用<code>SYSPROTO_EVENT</code>协议的内核事件（kern_event）API 允许在某些内核事件发生时通知应用程序和其他 KEXT。一般来说，内核控制 API 是首选，因为它提供双向通信。</p>
<div class="highlight-container" data-rel="Objc"><figure class="iseeu highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  连接内核拓展</span></span><br><span class="line"><span class="comment"> * @return NO表示失败，否则成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">BOOL</span>)establishConnection &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.socketFD != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建kext管控套接字</span></span><br><span class="line">    _socketFD = socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.socketFD == <span class="number">-1</span>) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Could not create socket.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化kext控制信息</span></span><br><span class="line">    <span class="keyword">struct</span> ctl_info info;</span><br><span class="line">    bzero(&amp;info, <span class="keyword">sizeof</span>(info));</span><br><span class="line">    strlcpy(info.ctl_name, <span class="string">&quot;your kext name&quot;</span>, MAX_KCTL_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取动态设置的kext ID</span></span><br><span class="line">    <span class="keyword">if</span> (ioctl(<span class="keyword">self</span>.socketFD, <span class="built_in">CTLIOCGINFO</span>, &amp;info)) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Could not get ID for kernel control.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化套接字连接地址</span></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_ctl addr;</span><br><span class="line">    bzero(&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sc_len = <span class="keyword">sizeof</span>(addr);</span><br><span class="line">    addr.sc_family = AF_SYSTEM;</span><br><span class="line">    addr.ss_sysaddr = AF_SYS_CONTROL;</span><br><span class="line">    addr.sc_id = info.ctl_id;</span><br><span class="line">    addr.sc_unit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = connect(<span class="keyword">self</span>.socketFD, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Connect failed with error code [%d].&quot;</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG_OC(LOG_INFO, <span class="string">&quot;Connect with kext successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 断开内核拓展连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)destroyConnection &#123;</span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    close(<span class="keyword">self</span>.socketFD);</span><br><span class="line">    _socketFD = <span class="number">-1</span>;</span><br><span class="line">    LOG_OC(LOG_INFO, <span class="string">&quot;Disconnect with kext successfully.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>内核通信</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 内核拓展与用户态进程的通信实现（二）</title>
    <url>/2023/0699a600b0.html</url>
    <content><![CDATA[<p><a href="https://conradsun.github.io/2023/06a9b0ec68.html">前面</a> 已经讲解了基于 KernControl API 的通信实现，该实现相对简单，但有一些缺点。内核向应用层传输消息需调用<code>ctl_enqueuedata</code>接口，该接口实际将数据缓存至缓冲区，当需要瞬时大量传输消息时，缓冲区容量有限，将丢弃后来的数据。如果传输的数据有优先级，则需对<code>ctl_enqueuedata</code>接口进行二次封装，避免高优先级数据丢失。</p>
<p><a class="link"   href="https://developer.apple.com/documentation/kernel/iokit_fundamentals" >IOKit Fundamentals <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 框架提供更加全面且方便的内核驱动 API。<a class="link"   href="https://developer.apple.com/documentation/kernel/ioservice-1g" >IOService <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是大多数内核驱动的基类，提供驱动实例化相关的各项服务。<a class="link"   href="https://developer.apple.com/documentation/kernel/iouserclient" >IOUserClient <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是与用户态应用程序间通信的基类，通过继承并实现该类，可与客户端应用程序建立通信机制。<a class="link"   href="https://developer.apple.com/documentation/kernel/ioshareddataqueue" >IOSharedDataQueue <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是非常便于使用的内核与用户态进程进行数据交换的通用队列，用户可自行设置队列大小。基于 IOKit 中的 IOService、IOUserClient、IOSharedDataQueue 可方便的实现内核与用户进程的通信和数据传输。下面结合代码进行简单实现，更多代码细节和工程配置可参考 <a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 项目。</p>
<h3 id="IOService-内核编程"><a href="#IOService-内核编程" class="headerlink" title="IOService 内核编程"></a>IOService 内核编程</h3><p>由于本次编写的为内核拓展，仅需要 IOService 进行驱动的加载与卸载管理，这里的代码实现很简单，仅需重写<code>start</code>、<code>stop</code>方法。如有加载卸载时的自定义操作可在函数中实现。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">DriverService.hpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriverService</span> : <span class="keyword">public</span> IOService &#123;</span><br><span class="line">    <span class="built_in">OSDeclareDefaultStructors</span>(DriverService);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Called by the kernel when the kext is loaded</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called by the kernel when the kext is unloaded</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearInstances</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="IOUserClient-内核编程"><a href="#IOUserClient-内核编程" class="headerlink" title="IOUserClient 内核编程"></a>IOUserClient 内核编程</h3><p>编写继承于 IOUserClient 的类后需重写如下方法，相关源文件实现请参考开源项目。<code>registerNotificationPort</code>和<code>clientMemoryForType</code>用于数据交换队列的配置，<code>externalMethod</code>配置对外函数调用接口，对外接口的函数原型如<code>callYourMethod</code>定义。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">DriverClient.hpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriverClient</span> : <span class="keyword">public</span> IOUserClient &#123;</span><br><span class="line">    <span class="built_in">OSDeclareDefaultStructors</span>(DriverClient);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Called as part of IOServiceOpen in clients.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithTask</span><span class="params">(<span class="type">task_t</span> owningTask, <span class="type">void</span> *securityID, UInt32 type)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called after initWithTask as part of IOServiceOpen.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when this class is stopping.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when a client manually disconnects (via IOServiceClose).</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientClose</span><span class="params">(<span class="type">void</span>)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when a client dies.</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientDied</span><span class="params">(<span class="type">void</span>)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called during termination.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">didTerminate</span><span class="params">(IOService *provider, IOOptionBits options, <span class="type">bool</span> *defer)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectSetNotificationPort. 用于数据传输</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">registerNotificationPort</span><span class="params">(<span class="type">mach_port_t</span> port, UInt32 type, UInt32 refCon)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectMapMemory. 用于数据传输</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientMemoryForType</span><span class="params">(UInt32 type, IOOptionBits *options, IOMemoryDescriptor **memory)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectCallScalarMethod. 设置对外通信调用接口</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">externalMethod</span><span class="params">(UInt32 selector, IOExternalMethodArguments *arguments, IOExternalMethodDispatch *dispatch, OSObject *target, <span class="type">void</span> *reference)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义对外调用方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> IOReturn <span class="title">callYourMethod</span><span class="params">(OSObject *target, <span class="type">void</span> *reference, IOExternalMethodArguments *arguments)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="IOKit-客户端编程"><a href="#IOKit-客户端编程" class="headerlink" title="IOKit 客户端编程"></a>IOKit 客户端编程</h3><p>连接内核拓展前需先进行加载，加载调用<code>KextManagerLoadKextWithIdentifier</code>或<code>KextManagerLoadKextWithURL</code>即可。内核拓展需在 plist 中配置<code>IOService</code>及<code>IOUserClient</code>类名，在拓展启动后可通过类名进行查找匹配。首先需查找注册了指定类名的内核驱动，代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">startProvider</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> service <span class="operator">=</span> <span class="type">IOServiceMatching</span>(<span class="string">&quot;your service name&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Wait for kext to be connected.&quot;</span>)</span><br><span class="line">    waitForDriver(matchingDict: service)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>service 存放匹配成功的驱动字典，然后需要创建通信端口和处理队列进行处理连接请求。处理连接请求时所持有的 IOService 对象需注意释放。调用<code>IOServiceOpen</code>接口即可建立连接，后面的<code>IOConnectCallScalarMethod</code>表示调用驱动对外接口进行连接测试。函数返回前需将用于连接请求处理的端口释放。通过<code>IOConnectCallScalarMethod或IOConnectCallStructMethod</code>可调用驱动对外接口，其中<code>ScalarMethod</code>仅可传输有限数量的常量，<code>StructMethod</code>则可传输自定义结构体类型，相关驱动配置可参照 NuwaStone 项目。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">processConnectionRequest</span>(<span class="params">iterator</span>: io_iterator_t) &#123;</span><br><span class="line">    <span class="keyword">repeat</span> &#123;</span><br><span class="line">        <span class="comment">// 持有的对象需进行释放</span></span><br><span class="line">        <span class="keyword">let</span> nextService <span class="operator">=</span> <span class="type">IOIteratorNext</span>(iterator)</span><br><span class="line">        <span class="keyword">guard</span> nextService <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立与内核驱动的连接</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="type">IOServiceOpen</span>(nextService, mach_task_self_, <span class="number">0</span>, <span class="operator">&amp;</span>connection)</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">!=</span> kIOReturnSuccess &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to open kext service [<span class="subst">\(String.<span class="keyword">init</span>(format: <span class="string">&quot;0x%x&quot;</span>, result))</span>].&quot;</span>)</span><br><span class="line">            <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用驱动方法测试连接</span></span><br><span class="line">        result <span class="operator">=</span> <span class="type">IOConnectCallScalarMethod</span>(connection, kNuwaUserClientOpen.rawValue, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">!=</span> kIOReturnSuccess &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;An error occurred while opening the connection [<span class="subst">\(result)</span>].&quot;</span>)</span><br><span class="line">            <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">        <span class="type">IONotificationPortDestroy</span>(notificationPort)</span><br><span class="line">        isConnected <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Connected with kext successfully.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">waitForDriver</span>(<span class="params">matchingDict</span>: <span class="type">CFDictionary</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> iterator: io_iterator_t <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> selfPointer <span class="operator">=</span> <span class="type">Unmanaged</span>.passUnretained(<span class="keyword">self</span>).toOpaque()</span><br><span class="line">    <span class="keyword">let</span> notificationQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;your queue name&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> appearedCallback: <span class="type">IOServiceMatchingCallback</span> <span class="operator">=</span> &#123; refcon, iterator <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> selfPtr <span class="operator">=</span> <span class="type">Unmanaged</span>&lt;<span class="type">YourClassName</span>&gt;.fromOpaque(refcon<span class="operator">!</span>).takeUnretainedValue()</span><br><span class="line">        selfPtr.processConnectionRequest(iterator: iterator)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notificationPort <span class="operator">=</span> <span class="type">IONotificationPortCreate</span>(kIOMasterPortDefault)</span><br><span class="line">    <span class="type">IONotificationPortSetDispatchQueue</span>(notificationPort, notificationQueue)</span><br><span class="line">    <span class="type">IOServiceAddMatchingNotification</span>(notificationPort, kIOMatchedNotification, matchingDict, appearedCallback, selfPointer, <span class="operator">&amp;</span>iterator)</span><br><span class="line">    processConnectionRequest(iterator: iterator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们通过调用<code>IOServiceOpen</code>存放<code>io_connect_t</code>类型的对象建立了与内核驱动的连接，相应的，断开连接时需调用<code>IOServiceClose</code>接口。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">stopProvider</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">IOServiceClose</span>(connection)</span><br><span class="line">    <span class="keyword">if</span> result <span class="operator">!=</span> <span class="type">KERN_SUCCESS</span> &#123;</span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to close IOService [<span class="subst">\(String.<span class="keyword">init</span>(format: <span class="string">&quot;0x%x&quot;</span>, result))</span>].&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connection <span class="operator">=</span> <span class="type">IO_OBJECT_NULL</span></span><br><span class="line">    isConnected <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>内核通信</tag>
        <tag>IOService</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 剪切板数据查看与修改</title>
    <url>/2023/08647ac6c0.html</url>
    <content><![CDATA[<p>macOS 系统没有内置的剪切板查看器，这对普通用户实际并没有什么影响，多数时候 <code>⌘ + C</code> 和 <code>⌘ + V</code> 就够用了。但对于一些开发者群体，可能需要查看当前拷贝内容的格式及数据是否正确，或者使用特定格式的数据完成某项工作，那么没有剪切板查看器会严重影响工作效率。<a class="link"   href="https://github.com/ConradSun/PasteShow" >PasteShow <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是一款开源的系统剪切板查看器，本文展示的代码源于该项目。</p>
<p>macOS 实现一款剪切板查看器是不难的，借助 <a class="link"   href="https://developer.apple.com/documentation/appkit" >AppKit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 提供的 <a class="link"   href="https://developer.apple.com/documentation/appkit/nspasteboard" >NSPasteboard <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 类可以很轻松的实现。系统标准剪切板分为几类，包括 general、font、ruler、find、drag，不同剪切板名称的含义请查看官方文档 <a class="link"   href="https://developer.apple.com/documentation/appkit/nspasteboard/name" >NSPasteboard.Name <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这里我们只涉及用于执行普通剪切、复制、粘贴操作的通用剪切板。</p>
<h3 id="检查数据变更"><a href="#检查数据变更" class="headerlink" title="检查数据变更"></a>检查数据变更</h3><p>在获取剪切板最新拷贝内容之前，需要知道内容更新的时机。macOS 系统并没有提供一种通知机制可以让开发者知道何时剪切板发生了变更事件，所以这里我们只能使用定时器轮询，检查剪切板是否发生数据变更。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CopiedInfo</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> changeCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> copiedItems <span class="operator">=</span> [[<span class="type">String</span>: <span class="type">Data</span>]]()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasteboardManager</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">PasteboardManager</span>()</span><br><span class="line">    <span class="keyword">var</span> copiedInfo <span class="operator">=</span> <span class="type">CopiedInfo</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pasteboard <span class="operator">=</span> <span class="type">NSPasteboard</span>.general</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> observerTimer <span class="operator">=</span> <span class="type">Timer</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        setupObserverTimer()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">setupObserverTimer</span>() &#123;</span><br><span class="line">        observerTimer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(withTimeInterval: <span class="number">0.25</span>, repeats: <span class="literal">true</span>, block: &#123; [<span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> copiedInfo.changeCount <span class="operator">!=</span> pasteboard.changeCount <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            onPasteboardChanged()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里设置了一个定时器，0.25s 触发一次，用于检查剪切板数据是否发生变更。是否发生变更很好判断，检查保存的 <code>changeCount</code> 是否和剪切板当前的变更次数一致即可。如果不一致则表明定时器间隔时间内发生了剪切或者复制事件。然后获取剪切板中存储的待粘贴数据。</p>
<h3 id="获取待粘贴数据"><a href="#获取待粘贴数据" class="headerlink" title="获取待粘贴数据"></a>获取待粘贴数据</h3><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">onPasteboardChanged</span>() &#123;</span><br><span class="line">    copiedInfo.copiedItems.removeAll()</span><br><span class="line">    copiedInfo.changeCount <span class="operator">=</span> pasteboard.changeCount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> pasteboard.pasteboardItems <span class="operator">!=</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pasteboard.pasteboardItems<span class="operator">!</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> itemInfo <span class="operator">=</span> [<span class="type">String</span>: <span class="type">Data</span>]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> type <span class="keyword">in</span> item.types &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value <span class="operator">=</span> item.data(forType: type) &#123;</span><br><span class="line">                itemInfo[type.rawValue] <span class="operator">=</span> value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        copiedInfo.copiedItems.append(itemInfo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>data(forType:)</code> 接口可以获取指定类型的剪切板数据，至此待粘贴的所有类型的数据全部获取到了。如果把剪切板数据简单作为字符串打印显示，可以将使用的接口换成 <code>string(forType:)</code>，这将强制返回 <code>String</code> 类型的数据。如果需要显示带格式的数据，则需要绘制界面。</p>
<h3 id="修改剪切板存储的数据"><a href="#修改剪切板存储的数据" class="headerlink" title="修改剪切板存储的数据"></a>修改剪切板存储的数据</h3><p>NSPasteboard 不仅提供了剪切板数据读取接口，也提供了数据设置接口。<strong>不过在修改（增加或者删除同理）数据前需将剪切板存储的数据全部清空，否则设置无法成功</strong>。此处为本人实际操作发现，没看到官方文档对此有说明，读者可自行尝试。下面举例说明删除某项数据的代码实现。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">removeDataWithReserve</span>(<span class="params">data</span>: <span class="type">Data</span>, <span class="params">forType</span> <span class="params">type</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pasteItems <span class="operator">=</span> [<span class="type">NSPasteboardItem</span>]()</span><br><span class="line">    pasteboard.clearContents()</span><br><span class="line">    <span class="keyword">for</span> items <span class="keyword">in</span> copiedInfo.copiedItems &#123;</span><br><span class="line">        <span class="keyword">let</span> pasteItem <span class="operator">=</span> <span class="type">NSPasteboardItem</span>()</span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> items &#123;</span><br><span class="line">            <span class="keyword">if</span> pair.key <span class="operator">==</span> type <span class="operator">&amp;&amp;</span> pair.value <span class="operator">==</span> data &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            pasteItem.setData(pair.value, forType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>(pair.key))</span><br><span class="line">        &#125;</span><br><span class="line">        pasteItems.append(pasteItem)</span><br><span class="line">    &#125;</span><br><span class="line">    pasteboard.writeObjects(pasteItems)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>实际上删除某项数据仅仅是清空所有数据，然后把不需要删除的数据添加回去。这里调用了两个接口：<code>setData(_:forType:)</code>、<code>writeObjects()</code>。虽然大多数情况下一次复制或者剪切的数据是一项（如复制一段文字、网页、图片等），一项数据内包含多个格式的数据，但类似一次复制多项文件（使用 <code>⌘</code> 或 <code>⇪</code> 多选）的情况，剪切板会设置多项数据，如下图所示。所以这里需要把各个项目的剪切板数据使用 <code>setData(_:forType:)</code> 接口设置完毕，再使用 <code>writeObjects()</code> 接口将所有项目的数据添加到剪切板。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Pasteboard-items.png"
                      alt="同时拷贝多个文件"
                ><figcaption>同时拷贝多个文件</figcaption></figure></p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>剪切板</tag>
        <tag>pasteboard</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 应用内更新检查</title>
    <url>/2023/078d2ace36.html</url>
    <content><![CDATA[<p>如果要实现应用内新版本检查，需对应用安装包和版本信息进行托管。这里所举例适用 Github 平台，但检查思路大同小异。总体步骤分为菜单配置、版本信息获取、用户窗口提示、在线下载更新。本文展示代码源自开源项目 <a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="配置检查更新菜单"><a href="#配置检查更新菜单" class="headerlink" title="配置检查更新菜单"></a>配置检查更新菜单</h3><p>首先需要在菜单栏新增一项菜单，然后关联功能实现方法。如这里在主菜单内新增<code>Check for Updates...</code>菜单。然后在<code>ViewController</code>文件中新增相关响应函数，这里入参类型为<code>NSMenuItem</code>。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Menu-update.png"
                      alt="添加检查更新菜单"
                ><figcaption>添加检查更新菜单</figcaption></figure></p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">updateMenuItemSelected</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSMenuItem</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后将新增的菜单和函数进行绑定。找到该菜单右上橘黄色的<code>1</code>图标，它表示<code>First Responder</code>，然后右击，在下拉显示的函数中找到刚刚新增的<code>updateMenuItemSelected</code>，然后鼠标移动到函数右侧圆框，等圆框内显示<code>+</code>，单击<code>+</code>并拖动到新增菜单，即可实现菜单和函数绑定，如下图所示。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Menu-link.png"
                      alt="绑定菜单和响应方法"
                ><figcaption>绑定菜单和响应方法</figcaption></figure></p>
<h3 id="获取版本信息"><a href="#获取版本信息" class="headerlink" title="获取版本信息"></a>获取版本信息</h3><p>首先需要获取应用的当前版本信息和最新版本信息，两者对比即可明确是否需要更新。获取当前应用的版本非常简单，相关信息都会存储到应用包内的<code>info.plist</code>文件中，开发者可通过主<code>Bundle</code>对象获取当前版本信息，代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">updateMenuItemSelected</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSMenuItem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> infoDict <span class="operator">=</span> <span class="type">Bundle</span>.main.infoDictionary</span><br><span class="line">    <span class="keyword">let</span> currentVersion <span class="operator">=</span> infoDict<span class="operator">!</span>[<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>应用的最新版本信息需通过发布页面获取，这里以 GitHub 托管网站为例进行说明。在对开源项目配置<code>Releases</code>页面后，开发者可在此发布产品（应用）更新，并对当前发布选择一个<code>tag</code>，一般选取的<code>tag</code>为版本号。而且最新的发布会被置为<code>Latest</code>，这意味着我们可以通过访问<code>https://github.com/UserName/ProjectName/releases/latest</code>查看产品的最新版本，访问该链接时，会自动跳转到<code>https://github.com/UserName/ProjectName/releases/tag/YourLatestTag</code>，<code>YourLatestTag</code>即最新的版本号。我们可以据此使用<code>curl -I</code>获取最新的版本信息，命令如下。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ curl -I https://github.com/ConradSun/NuwaStone/releases/latest</span><br><span class="line">HTTP/1.1 200 Connection established</span><br><span class="line"></span><br><span class="line">HTTP/2 302</span><br><span class="line">server: GitHub.com</span><br><span class="line">date: Mon, 17 Jul 2023 07:09:05 GMT</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With</span><br><span class="line">location: https://github.com/ConradSun/NuwaStone/releases/tag/v2.0</span><br><span class="line">cache-control: no-cache</span><br><span class="line">strict-transport-security: max-age=31536000; includeSubdomains; preload</span><br><span class="line">x-frame-options: deny</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">x-xss-protection: 0</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<p>上面<code>curl -I</code>输出里的<code>location</code>便是跳转后的地址。截取最后一个地址单元，便能获取到最新的版本号，代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">updateMenuItemSelected</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSMenuItem</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> latestVersion <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> result <span class="operator">=</span> launchTask(path: <span class="string">&quot;/usr/bin/curl&quot;</span>, args: [<span class="string">&quot;-I&quot;</span>, <span class="string">&quot;YourUrl&quot;</span>]) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> contentList <span class="operator">=</span> result.split(separator: <span class="string">&quot;<span class="subst">\r</span><span class="subst">\n</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> contentItem <span class="keyword">in</span> contentList &#123;</span><br><span class="line">        <span class="keyword">if</span> contentItem.contains(<span class="string">&quot;location&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tag <span class="operator">=</span> contentItem.split(separator: <span class="string">&quot;/&quot;</span>).last<span class="operator">!</span></span><br><span class="line">            <span class="keyword">if</span> tag.first <span class="operator">==</span> <span class="string">&quot;v&quot;</span> &#123;</span><br><span class="line">                <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;The latest version is <span class="subst">\(tag)</span>.&quot;</span>)</span><br><span class="line">                latestVersion <span class="operator">=</span> tag.dropFirst().lowercased()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">launchTask</span>(<span class="params">path</span>: <span class="type">String</span>, <span class="params">args</span>: [<span class="type">String</span>]) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> task <span class="operator">=</span> <span class="type">Process</span>()</span><br><span class="line">    <span class="keyword">let</span> pipe <span class="operator">=</span> <span class="type">Pipe</span>()</span><br><span class="line">    task.arguments <span class="operator">=</span> args</span><br><span class="line">    task.standardOutput <span class="operator">=</span> pipe</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">macOS</span> <span class="number">10.13</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">        task.executableURL <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: path)</span><br><span class="line">        <span class="keyword">try?</span> task.run()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        task.launchPath <span class="operator">=</span> path</span><br><span class="line">        task.launch()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> output <span class="operator">=</span> <span class="type">Data</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">macOS</span> <span class="number">10.15</span>.<span class="number">4</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> value <span class="operator">=</span> <span class="keyword">try?</span> pipe.fileHandleForReading.readToEnd() <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        output <span class="operator">=</span> value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output <span class="operator">=</span> pipe.fileHandleForReading.readDataToEndOfFile()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">String</span>(data: output, encoding: .utf8) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="用户提示弹窗"><a href="#用户提示弹窗" class="headerlink" title="用户提示弹窗"></a>用户提示弹窗</h3><p>当前应用的版本号和最新的版本号均获取到了，只需比较两个版本号是否相等，便可知道当前版本是否最新，然后对是否需要更新进行弹窗提示。完整代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">updateMenuItemSelected</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSMenuItem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> infoDict <span class="operator">=</span> <span class="type">Bundle</span>.main.infoDictionary</span><br><span class="line">    <span class="keyword">let</span> currentVersion <span class="operator">=</span> infoDict<span class="operator">!</span>[<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> latestVersion <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> infoView <span class="operator">=</span> <span class="type">NSAlert</span>()</span><br><span class="line">    infoView.alertStyle <span class="operator">=</span> .informational</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> result <span class="operator">=</span> launchTask(path: <span class="string">&quot;/usr/bin/curl&quot;</span>, args: [<span class="string">&quot;-I&quot;</span>, <span class="string">&quot;YourUrl&quot;</span>]) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> contentList <span class="operator">=</span> result.split(separator: <span class="string">&quot;<span class="subst">\r</span><span class="subst">\n</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> contentItem <span class="keyword">in</span> contentList &#123;</span><br><span class="line">        <span class="keyword">if</span> contentItem.contains(<span class="string">&quot;location&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tag <span class="operator">=</span> contentItem.split(separator: <span class="string">&quot;/&quot;</span>).last<span class="operator">!</span></span><br><span class="line">            <span class="keyword">if</span> tag.first <span class="operator">==</span> <span class="string">&quot;v&quot;</span> &#123;</span><br><span class="line">                <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;The latest version is <span class="subst">\(tag)</span>.&quot;</span>)</span><br><span class="line">                latestVersion <span class="operator">=</span> tag.dropFirst().lowercased()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> latestVersion.isEmpty &#123;</span><br><span class="line">        infoView.alertStyle <span class="operator">=</span> .critical</span><br><span class="line">        infoView.messageText <span class="operator">=</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line">        infoView.informativeText <span class="operator">=</span> <span class="string">&quot;Failed to get latest info for YourAPPName.&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> latestVersion <span class="operator">==</span> currentVersion &#123;</span><br><span class="line">        infoView.messageText <span class="operator">=</span> <span class="string">&quot;You&#x27;re up-to-date!&quot;</span></span><br><span class="line">        infoView.informativeText <span class="operator">=</span> <span class="string">&quot;YourAPPName <span class="subst">\(currentVersion)</span> is the latest version.&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        infoView.messageText <span class="operator">=</span> <span class="string">&quot;You&#x27;re out-of-date!&quot;</span></span><br><span class="line">        infoView.informativeText <span class="operator">=</span> <span class="string">&quot;Newer version <span class="subst">\(currentVersion)</span> is currently avaliable.&quot;</span></span><br><span class="line">        infoView.addButton(withTitle: <span class="string">&quot;Ignore&quot;</span>)</span><br><span class="line">        infoView.addButton(withTitle: <span class="string">&quot;Update&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resp <span class="operator">=</span> infoView.runModal()</span><br><span class="line">    <span class="keyword">if</span> resp <span class="operator">==</span> .alertSecondButtonReturn &#123;</span><br><span class="line">        <span class="keyword">let</span> siteAddr <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;YourProductsUrl&quot;</span>)</span><br><span class="line">        <span class="type">NSWorkspace</span>.shared.open(siteAddr<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>检查更新</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言入门之 call 指令</title>
    <url>/2023/0734337142.html</url>
    <content><![CDATA[<p>汇编语言作为最为底层的语言，是逆向无法绕过的一个门槛。在逆向 macOS 内核二进制的时候，发现<code>execsw</code>符号调用发生变化，<a href="https://conradsun.github.io/2023/075ef6acf1.html">上文</a> 已对此进行说明，os14 不再间接使用<code>execsw</code>结构体常量数组进行函数调用，而是直接调用相关函数。虽然这两处函数调用均反汇编为<code>call</code>指令，但对应的操作码并不一样。实际上<code>call</code>指令的操作码有多个。</p>
<h3 id="call-指令"><a href="#call-指令" class="headerlink" title="call 指令"></a>call 指令</h3><p><code>call</code>指令的操作码及对应含义如下表。主要分为相对近调用、绝对间接近调用、绝对远调用等。表中<code>cd</code>表示 4 字节，<code>/2</code>表示所在字节为<code>ModR/M</code>，用于指定存储操作数的寄存器或内存地址。这里的 near、far 是指针对当前代码段而言，近调用即段内调用，指 CS 寄存器在调用中不会发生更改，远调用即段间调用。另外近调用的过程返回时使用<code>retn</code>操作码，远调用的过程返回时使用<code>retf</code>操作码。感兴趣的可以阅读<a class="link"   href="https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.html" >《Intel® 64 and IA-32 Architectures Software Developer’s Manual》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<table>
<thead>
<tr>
<th>Opcode</th>
<th>Instruction</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>E8 cd</td>
<td>call re&#x2F;32</td>
<td>Call near, relative, displacement relative to next instruction.</td>
</tr>
<tr>
<td>FF &#x2F;2</td>
<td>call r&#x2F;m32</td>
<td>Call near, absolute indirect, address given in register or memory.</td>
</tr>
<tr>
<td>9A cd</td>
<td>call ptr16:16</td>
<td>Call far, absolute, address given in operand.</td>
</tr>
<tr>
<td>FF &#x2F;3</td>
<td>call m16:32</td>
<td>If selector points to a gate, then RIP &#x3D; 64-bit displacement taken from gate; else RIP &#x3D; zero extended 32-bit offset from far pointer referenced in the instruction.</td>
</tr>
</tbody></table>
<p>这里贴一下手册的 [Table 2-2. 32-Bit Addressing Forms with the ModR&#x2F;M Byte]，便于了解<code>FF</code>开头的调用指令如何解释。注意红框圈出的部分，本文将涉及该指令。从表可知，<code>FF15</code>和<code>FF1D</code>指令的操作数均为 32 位立即数，只不过前者是近调用，后者是远调用。<br><figure class="image-caption"><img src="/images/article-pics/Call-ModR:M.png" alt="ModR/M 32位寻址表"><figcaption>ModR/M 32位寻址表</figcaption></figure></p>
<h3 id="call-near"><a href="#call-near" class="headerlink" title="call near"></a>call near</h3><p>首先关注一下近调用。执行近调用时，处理器将 EIP 寄存器的值（包含当前<code>call</code>指令到下一条指令的偏移）压栈，然后处理器执行目标地址的代码，目标地址的计算如下。</p>
<blockquote>
<p>目标地址 &#x3D; 下一条指令地址（当前指令地址 + 当前指令长度） + 相对偏移量</p>
</blockquote>
<p>这里写一个 demo 查看两种近调用指令，代码如下。代码很简单，主要测试直接调用函数和使用结构体偏移间接调用函数最终的编码有何不同。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;call func\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_func</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>(*<span class="type">const</span> func)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *func_name;</span><br><span class="line">&#125; <span class="type">const</span> user_func[] = &#123;</span><br><span class="line">    &#123; func, <span class="string">&quot;func&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    func();</span><br><span class="line">    user_func[<span class="number">0</span>].func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译出的二进制使用 ida 反汇编，结果如下。<code>main</code>函数中的两处函数调用的指令操作码是不同的，其中直接调用是<code>E8</code>，通过结构体偏移调用是<code>FF15</code>。<code>E8C5FFFFFF</code>表示相对近调用，相对偏移量为<code>FFFFFFC5</code>，这里高地址表示高字节，所以类似<code>0x1234</code>在二进制中是以<code>3412</code>显示的。偏移量高字节均是 F，说明偏移量为负，实际地址为<code>0x100003F86+5+0xFFFFFFC5</code>，然后把进位抹掉，结果是<code>0x100003F50</code>，即<code>_func</code>自定义函数所在地址。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">__text:</span>0000000100003F50                 <span class="meta">public</span> _func</span><br><span class="line"><span class="symbol">__text:</span>0000000100003F50 _func           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: _main+16↓p</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F50                 <span class="keyword">push</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F51                 <span class="keyword">mov</span>     <span class="built_in">rbp</span>, <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F54                 <span class="keyword">lea</span>     <span class="built_in">rdi</span>, aCallFunc  <span class="comment">; &quot;call func\n&quot;</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F5B                 <span class="keyword">mov</span>     <span class="built_in">al</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F5D                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">__text:</span>0000000100003F62                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F64                 <span class="keyword">pop</span>     <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F65                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F65 _func           endp</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F70                 <span class="meta">public</span> _main</span><br><span class="line"><span class="symbol">__text:</span>0000000100003F70 _main           proc <span class="built_in">near</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F70                 <span class="keyword">push</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F71                 <span class="keyword">mov</span>     <span class="built_in">rbp</span>, <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F74                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F78                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_4], <span class="number">0</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F7F                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_8], <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F82                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_10], <span class="built_in">rsi</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F86                 <span class="keyword">call</span>    _func                 <span class="comment">; Hex: E8C5FFFFFF</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F8B                 <span class="keyword">call</span>    <span class="built_in">cs</span>:_user_func         <span class="comment">; Hex: FF157F000000</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F91                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F93                 <span class="keyword">add</span>     <span class="built_in">rsp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F97                 <span class="keyword">pop</span>     <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F98                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">__text:</span>0000000100003F98 _main           endp</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">__got:</span><span class="number">0000000100004000</span> _printf_ptr     <span class="built_in">dq</span> <span class="number">8020000100004030h</span>    <span class="comment">; DATA XREF: _printf↑r</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">__const:</span><span class="number">0000000100004010</span>                 <span class="meta">public</span> _user_func</span><br><span class="line"><span class="symbol">__const:</span><span class="number">0000000100004010</span> _user_func      <span class="built_in">dq</span> <span class="number">10000000003F50h</span>      <span class="comment">; DATA XREF: _main+1B↑r</span></span><br></pre></td></tr></table></figure>

<p><code>FF15</code>也表示近调用。根据官方解释，<code>FF15</code>和<code>E8</code>调用指令的区别在于，<code>FF15</code>是间接函数调用，其中要调用的函数的地址是从内存或者寄存器加载的绝对地址，而<code>E8</code>是一个直接函数调用，其中要调用的函数的地址通过相对 EIP 的偏移量指定。但在 macOS 中，感觉这两者都是通过偏移量指定函数地址，不同点在于<code>FF15</code>可以调用非<code>__text</code>代码段的符号。</p>
<p>感兴趣的可以尝试计算偏移，将这里的<code>E8</code>指令后的偏移改为<code>_user_func</code>结构体符号的偏移，运行后会报错 <strong>bus error</strong>。上文所提旧版本的 macOS 内核调用<code>execsw</code>符号便是使用<code>FF15</code>，os14 则是使用<code>E8</code>直接调用。</p>
<h3 id="call-far"><a href="#call-far" class="headerlink" title="call far"></a>call far</h3><p>远调用正常的编码不太容易实现，这里使用汇编语言写一个最简的远调用例程。这里显式指定调用方式为<code>call far</code>，需要注意被调用函数应使用<code>retf</code>作为返回值。编译命令为<code>nasm -fmacho64 ./far_call.asm</code>，生成 Mach-o 格式的 64 位二进制。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">default</span> <span class="built_in">rel</span></span><br><span class="line"><span class="symbol">func:</span></span><br><span class="line">    <span class="keyword">retf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">call</span> <span class="built_in">far</span> [func]</span><br></pre></td></tr></table></figure>

<p>编译后结果如下。这里使用的<code>call far</code>被编译为<code>FF1D</code>，从上表可知，指令表示远调用，且操作数为 32 位立即数。实际上上述代码实际编译出来的二进制很短，代码段数据仅有 8 字节：<code>DB48FF1DF8FFFFFF</code>，那么根据上述计算，执行调用命令后 IP 寄存器位置是 0x8，加上偏移量-8，则函数地址为 0，符合编译结果。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000000</span> func            proc <span class="built_in">far</span>                <span class="comment">; DATA XREF: _start↓r</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000000</span>                 <span class="keyword">retf</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000000</span> func            endp</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000001</span>                 <span class="meta">public</span> _start</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000001</span> _start          proc <span class="built_in">near</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000001</span>                 <span class="keyword">call</span>    <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">cs</span>:func     <span class="comment">; Hex: FF1DF8FFFFFF</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000000000001</span> _start          endp</span><br></pre></td></tr></table></figure>

<p>以上为个人学习总结，其中解释可能有错误之处，欢迎读者指出。</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>asm</tag>
        <tag>call</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 应用程序坞和菜单栏设置</title>
    <url>/2023/07f5dbd820.html</url>
    <content><![CDATA[<p>和 Windows 操作系统有所不同的是，macOS 中多数应用程序关闭窗口后并不会退出，程序坞（Dock）还会显示该应用的图标，图标下的黑点也表示该应用处于打开状态。造成这种差异的原因是 Windows 使用的是 Single Document Interface (SDI) 式 GUI ，应用、窗口和文档具有一对一的关系；而 macOS 使用的是 Multiple Document Interface (MDI) 式 GUI，应用、窗体、文档具有一对多的关系。macOS 作为更古老的操作系统，在早期计算机算力不强时使用 MDI 可减少应用启动关闭造成的资源消耗。更多细节可阅读 <a class="link"   href="https://www.zhihu.com/question/21143701" >知乎问答 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。本文展示的代码片段出自开源项目 <a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，如需了解更多细节可参考该项目。</p>
<h3 id="窗体重新显示"><a href="#窗体重新显示" class="headerlink" title="窗体重新显示"></a>窗体重新显示</h3><p>使用 Xcode 默认创建的 app 便是 MDI，虽然窗体关闭后应用并未退出，但点击程序坞应用图标并不会重新显示窗体，如需实现该功能需重写<code>AppDelegate</code>类的相关函数，代码如下。入参中的<code>flag</code>表示当前窗体是否关闭，如果关闭需查找当前系统所持有的窗体，将其置于前台。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">applicationShouldHandleReopen</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSApplication</span>, <span class="params">hasVisibleWindows</span> <span class="params">flag</span>: <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> window <span class="operator">=</span> getMainWindow(sender) &#123;</span><br><span class="line">        window.makeKeyAndOrderFront(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getMainWindow</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSApplication</span>) -&gt; <span class="type">NSWindow</span>? &#123;</span><br><span class="line">    <span class="keyword">for</span> window: <span class="type">AnyObject</span> <span class="keyword">in</span> sender.windows &#123;</span><br><span class="line">        <span class="keyword">if</span> window.frameAutosaveName <span class="operator">==</span> <span class="string">&quot;Your Window Name&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> window <span class="keyword">as?</span> <span class="type">NSWindow</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="程序坞图标隐藏"><a href="#程序坞图标隐藏" class="headerlink" title="程序坞图标隐藏"></a>程序坞图标隐藏</h3><p>如果不想在程序坞显示应用图标，也是修改<code>AppDelegate</code>文件。<code>NSApp.setActivationPolicy</code>API 可以很方便的设置应用状态，状态分为<code>regular</code>、<code>accessory</code>、<code>prohibited</code>。简单来说分别表示正常显示图标和窗口、不在 Dock 栏显示图标、不显示图标和窗口。这里展示的代码图标和窗体状态同步，如果隐藏图标，窗体也一同关闭。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">hideDockIcon</span>() &#123;</span><br><span class="line">    <span class="type">NSApp</span>.setActivationPolicy(.accessory)</span><br><span class="line">    getMainWindow(<span class="type">NSApplication</span>.shared)<span class="operator">?</span>.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">showDockIcon</span>() &#123;</span><br><span class="line">    <span class="type">NSApp</span>.setActivationPolicy(.regular)</span><br><span class="line">    <span class="type">NSApp</span>.activate(ignoringOtherApps: <span class="literal">true</span>)</span><br><span class="line">    getMainWindow(<span class="type">NSApplication</span>.shared)<span class="operator">?</span>.makeKeyAndOrderFront(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="常驻菜单栏设置"><a href="#常驻菜单栏设置" class="headerlink" title="常驻菜单栏设置"></a>常驻菜单栏设置</h3><p>有些应用在桌面右上角会提供常驻的菜单，例如系统输入法、控制中心等。如果需要设置该功能，也是修改<code>AppDelegate</code>文件。这里为右上角的菜单栏添加了后台运行、显示窗体、关闭应用三个功能。<code>button.toolTip</code>是指鼠标停靠在菜单栏图标上时显示的提示信息，如果不设置则没有提示。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setupMenuBar</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> statusMenu <span class="operator">=</span> <span class="type">NSMenu</span>()</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Run in Background&quot;</span>, action: <span class="keyword">#selector</span>(hideDockIcon), keyEquivalent: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Show App Window&quot;</span>, action: <span class="keyword">#selector</span>(showDockIcon), keyEquivalent: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Quit&quot;</span>, action: <span class="keyword">#selector</span>(<span class="type">NSApplication</span>.terminate(<span class="keyword">_</span>:)), keyEquivalent: <span class="string">&quot;q&quot;</span>)</span><br><span class="line"></span><br><span class="line">    menuBar.button<span class="operator">!</span>.image <span class="operator">=</span> <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(<span class="string">&quot;Your Menu Icon Name&quot;</span>))</span><br><span class="line">    menuBar.button<span class="operator">!</span>.toolTip <span class="operator">=</span> <span class="string">&quot;Your Tip Name&quot;</span></span><br><span class="line">    menuBar.menu <span class="operator">=</span> statusMenu</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>程序坞</tag>
        <tag>菜单栏</tag>
        <tag>窗体</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 用户态进程间的通信实现</title>
    <url>/2023/06b3e3d734.html</url>
    <content><![CDATA[<p>macOS 内核与用户态进程的通信前面已经讲解过了，用户态进程间通信较为简单，Apple 官方推荐使用 <a class="link"   href="https://developer.apple.com/documentation/xpc" >XPC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 机制。XPC 有底层的 C API，也有封装后的上层的 objc 和 swift API，可以实现像调用自身进程的接口一样调用对端的暴露接口。这里以 swift 为例说明 XPC 的代码实现。开源项目 <a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 用户态进程间通信均基于 XPC 实现，更多代码细节可参考该项目。</p>
<h3 id="对外接口及类定义"><a href="#对外接口及类定义" class="headerlink" title="对外接口及类定义"></a>对外接口及类定义</h3><p>使用 XPC 需新建两个协议，作为自身进程和对端进程的通信接口，然后新建一个处理 XPC 连接请求的类，注意需继承 NSObject，以便实现 XPC 系统调用所需的代理接口。注意，为了方便 XPCConnection 类是自身进程与对端进程共用的，但部分方法是不能共用的，详细见注释。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端进程协议</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">ClientXPCProtocol</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端进程协议</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">ServerXPCProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">connectResponse</span>(<span class="keyword">_</span> <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接请求处理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XPCConnection</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">XPCConnection</span>()</span><br><span class="line">    <span class="keyword">var</span> listener: <span class="type">NSXPCListener</span>?</span><br><span class="line">    <span class="comment">// 连接处理对象</span></span><br><span class="line">    <span class="keyword">var</span> connection: <span class="type">NSXPCConnection</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">getMachServiceName</span>(<span class="params">from</span> <span class="params">bundle</span>: <span class="type">Bundle</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> clientKeys <span class="operator">=</span> bundle.object(forInfoDictionaryKey: <span class="type">ClientName</span>) <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>]</span><br><span class="line">        <span class="keyword">let</span> machServiceName <span class="operator">=</span> clientKeys<span class="operator">?</span>[<span class="type">MachServiceKey</span>] <span class="keyword">as?</span> <span class="type">String</span></span><br><span class="line">        <span class="keyword">return</span> machServiceName <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅服务端进程调用</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">startListener</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> newListener <span class="operator">=</span> <span class="type">NSXPCListener</span>(machServiceName: <span class="string">&quot;your service name&quot;</span>)</span><br><span class="line">        newListener.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        newListener.resume()</span><br><span class="line">        listener <span class="operator">=</span> newListener</span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Start XPC listener successfully.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅客户端进程调用</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">connectToServer</span>(<span class="params">bundle</span>: <span class="type">Bundle</span>, <span class="params">delegate</span>: <span class="type">ClientXPCProtocol</span>, <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> connection <span class="operator">==</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client already connected.&quot;</span>)</span><br><span class="line">            handler(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> getMachServiceName(from: bundle) <span class="operator">==</span> <span class="type">ClientBundle</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            handler(<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> newConnection <span class="operator">=</span> <span class="type">NSXPCConnection</span>(machServiceName: <span class="type">DaemonBundle</span>)</span><br><span class="line">        newConnection.exportedObject <span class="operator">=</span> delegate</span><br><span class="line">        newConnection.exportedInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">ClientXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.remoteObjectInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">DaemonXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        connection <span class="operator">=</span> newConnection</span><br><span class="line">        newConnection.resume()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> proxy <span class="operator">=</span> newConnection.remoteObjectProxyWithErrorHandler &#123; error <span class="keyword">in</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to connect with error [<span class="subst">\(error)</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">self</span>.connection<span class="operator">?</span>.invalidate()</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            handler(<span class="literal">false</span>)</span><br><span class="line">        &#125; <span class="keyword">as?</span> <span class="type">DaemonXPCProtocol</span></span><br><span class="line"></span><br><span class="line">        proxy<span class="operator">?</span>.connectResponse(handler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>XPC 的代码实现是较为简单的，<code>startListener</code>函数首先需创建连接所用的 Mach 端口，网络资源在 Mac 内核抽象为了 Mach 端口资源，然后设置处理连接请求的代理为自身类，后面需编写请求处理代码以校验对端并建立连接。<code>connectToServer</code>函数首先判断是否连接已建立，然后简单校验了一下 APP 包名。创建连接对象时需设置自身暴露接口和远程调用接口，设置完成后所调用的<code>connectResponse</code>为连接测试函数。在调用远程接口前均需获取<code>remoteObjectProxy</code>远程对象代理，这里需进行错误处理，如果出错则表示连接断开。</p>
<h3 id="XPC-连接请求系统调用代理接口"><a href="#XPC-连接请求系统调用代理接口" class="headerlink" title="XPC 连接请求系统调用代理接口"></a>XPC 连接请求系统调用代理接口</h3><p><code>startListener</code>函数中设置处理连接请求的代理为自身类，所以类需要实现代理方法，代理方法的实现很简单，仅需实现下面一种方法。函数内的实现看起来与<code>connectToServer</code>差不多，不过多了错误处理机制。建立连接前可以进行签名校验以增强安全性。这里的<code>invalidationHandler</code>被系统调用时表明连接正常断开，<code>interruptionHandler</code>被系统调用时表明连接意外断开，如果有断开重连要求可以加在这里。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">XPCConnection</span>: <span class="title class_">NSXPCListenerDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">listener</span>(<span class="keyword">_</span> <span class="params">listener</span>: <span class="type">NSXPCListener</span>, <span class="params">shouldAcceptNewConnection</span> <span class="params">newConnection</span>: <span class="type">NSXPCConnection</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        newConnection.exportedObject <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        newConnection.exportedInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">DaemonXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.remoteObjectInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">ClientXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.invalidationHandler <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client disconnected.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        newConnection.interruptionHandler <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client interrupted.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection <span class="operator">=</span> newConnection</span><br><span class="line">        newConnection.resume()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="服务端对外暴露接口"><a href="#服务端对外暴露接口" class="headerlink" title="服务端对外暴露接口"></a>服务端对外暴露接口</h3><p>暴露接口根据自己的项目需要自行设计实现就好，但要注意这些接口是无返回值的，毕竟是远程调用，基本也不会需要返回值。这里使用<code>@escaping</code>修饰代码块，表示代码块的调用可能在函数返回后。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension XPCConnection: DaemonXPCProtocol &#123;</span><br><span class="line">    func connectResponse(_ handler: @escaping (Bool) -&gt; Void) &#123;</span><br><span class="line">        Logger(.Info, &quot;Client connected.&quot;)</span><br><span class="line">        handler(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>进程间通信</tag>
        <tag>XPC</tag>
      </tags>
  </entry>
</search>
