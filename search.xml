<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>macOS修改Mach-o文件实现动态库注入（一）</title>
    <url>/2023/06/25/macOS%E4%BF%AE%E6%94%B9MachO%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%BA%93%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><a class="link"   href="https://conradsun.github.io/2023/06/24/macOS%20Hook%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/" >前面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已经提到可以通过修改环境变量<code>DYLD_INSERT_LIBRARIES</code>注入动态库，但这种方法具有一定的局限性，在开启SIP的机器上，应用程序可能无法继承该环境变量，导致注入失败。那么有没有局限性更小的注入方法？本文所展示的代码片段来自开源项目<a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，更多细节可参考该项目。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>可以找个Mach-o (Mach Object File Format)文件先分析一下。和Linux系统上的ELF (Extensible Firmware Interface)、Windows系统上的PE (Portable Executable)文件相比，Mach-o文件结构大体与之类似，可分为Header、Segment、Section等部分，使用<a class="link"   href="https://sourceforge.net/projects/machoview/" >MachOView <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>工具可以方便查看二进制内容。</p>
<p>Mach-o文件可分为瘦二进制和胖二进制（Fat Binary），即支持多处理器架构的二进制文件，使用<code>file</code>命令可查看文件支持的架构，如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ file /usr/bin/python3      </span><br><span class="line">/usr/bin/python3: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64</span><br><span class="line">- Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e</span><br><span class="line">- Mach-O 64-bit executable arm64e]</span><br><span class="line">/usr/bin/python3 (for architecture x86_64):	Mach-O 64-bit executable x86_64</span><br><span class="line">/usr/bin/python3 (for architecture arm64e):	Mach-O 64-bit executable arm64e</span><br></pre></td></tr></table></figure></div>

<p>本文不涉及胖二进制的分析修改，先分析单二进制文件如何修改并注入。有关Mach-o文件格式的讲解请自行百度&#x2F;谷歌。如下图是一个简单的仅支持x86_64架构的Mach-o文件格式。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-helloWorld.png"
                      alt="单架构Mach-o文件格式"
                ></p>
<p>需要关注的是Load Commands指令加载部分。其中<code>LC_LOAD_DYLIB</code>指令表示该二进制依赖的动态库信息，如所有二进制均依赖的动态库libSystem.B.dylib就在其中<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-libSystem.B.dylib.png"
                      alt="libSystem.B.dylib加载指令"
                ></p>
<p>那么如果注入动态库就需要修改Load Commands，添加一条<code>LC_LOAD_DYLIB</code>的指令，将待添加的动态库名称填入。需要特别注意的是，添加的指令区域必须是该二进制的空白区。因为内存对齐的原因，每个Segment之间会有一段空白区，添加的指令内容需写到Load Commands最后一条指令之后、TEXT Section之前的区域。多数情况下这部分区域是足够容纳要添加的内容的，如果不够则不能写入。</p>
<h2 id="动态库注入分析"><a href="#动态库注入分析" class="headerlink" title="动态库注入分析"></a>动态库注入分析</h2><p>在进行注入前首先需要判断文件格式，是否为可执行文件、是否为胖二进制，进一步分析是64bit还是32bit可执行文件。代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">signAdhoc</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> task <span class="operator">=</span> <span class="type">Process</span>()</span><br><span class="line">    task.executableURL <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: <span class="string">&quot;/usr/bin/codesign&quot;</span>)</span><br><span class="line">    task.arguments <span class="operator">=</span> [<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;-&quot;</span>, binaryPath]</span><br><span class="line">    <span class="keyword">try?</span> task.run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">initWithFile</span>(<span class="params">filePath</span>: <span class="type">String</span>, <span class="params">libPath</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span><span class="type">FileManager</span>.default.isExecutableFile(atPath: filePath) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;File to be modified is not Executable.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">FileManager</span>.default.contents(atPath: filePath) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to obtain contents for file.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    binaryPath <span class="operator">=</span> filePath</span><br><span class="line">    dylibPath <span class="operator">=</span> libPath</span><br><span class="line">    machOData <span class="operator">=</span> data</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">repackBinary</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> machOData.isEmpty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> machOData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: fat_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to get fat header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>, <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            result <span class="operator">=</span> processThinMachO(offset: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        signAdhoc()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里的signAdhoc是为了给修改后的二进制签名，因为修改后二进制的内容发生了更改，不重新签名校验无法通过，系统会禁止执行。进行二进制注入的关键代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">injectDylib</span>(<span class="params">header</span>: mach_header, <span class="params">offset</span>: <span class="type">UInt64</span>, <span class="params">is64bit</span>: <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> fileHandle <span class="operator">=</span> <span class="type">FileHandle</span>(forWritingAtPath: binaryPath) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to create handler for binary file.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pathSize <span class="operator">=</span> (dylibPath.count <span class="operator">&amp;</span> <span class="operator">~</span>(pathPadding <span class="operator">-</span> <span class="number">1</span>)) <span class="operator">+</span> pathPadding</span><br><span class="line">    <span class="keyword">let</span> cmdSize <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size <span class="operator">+</span> pathSize</span><br><span class="line">    <span class="keyword">var</span> cmdOffset: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dylibCmd <span class="operator">=</span> dylib_command()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is64bit &#123;</span><br><span class="line">        cmdOffset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">UInt64</span>(<span class="type">MemoryLayout</span>&lt;mach_header_64&gt;.size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cmdOffset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">UInt64</span>(<span class="type">MemoryLayout</span>&lt;mach_header&gt;.size)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dylibCmd.cmd <span class="operator">=</span> <span class="type">UInt32</span>(<span class="type">LC_LOAD_DYLIB</span>)</span><br><span class="line">    dylibCmd.cmdsize <span class="operator">=</span> <span class="type">UInt32</span>(cmdSize)</span><br><span class="line">    dylibCmd.dylib.name <span class="operator">=</span> lc_str(offset: <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try?</span> fileHandle.seek(toOffset: cmdOffset <span class="operator">+</span> <span class="type">UInt64</span>(header.sizeofcmds))</span><br><span class="line">    fileHandle.write(<span class="type">Data</span>(bytes: <span class="operator">&amp;</span>dylibCmd, count: <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size))</span><br><span class="line">    fileHandle.write(dylibPath.data(using: .utf8)<span class="operator">!</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> newHeader <span class="operator">=</span> header</span><br><span class="line">    newHeader.ncmds <span class="operator">=</span> newHeader.ncmds <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    newHeader.sizeofcmds <span class="operator">=</span> newHeader.sizeofcmds <span class="operator">+</span> <span class="type">UInt32</span>(cmdSize)</span><br><span class="line">    <span class="keyword">try?</span> fileHandle.seek(toOffset: offset)</span><br><span class="line">    fileHandle.write(<span class="type">Data</span>(bytes: <span class="operator">&amp;</span>newHeader, count: <span class="type">MemoryLayout</span>&lt;mach_header&gt;.size))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try?</span> fileHandle.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">processThinMachO</span>(<span class="params">offset</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> thinData <span class="operator">=</span> machOData.advanced(by: offset)</span><br><span class="line">    <span class="keyword">return</span> thinData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: mach_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to get mach header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>:</span><br><span class="line">            <span class="keyword">return</span> injectDylib(header: header.pointee, offset: <span class="type">UInt64</span>(offset), is64bit: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            <span class="keyword">return</span> injectDylib(header: header.pointee, offset: <span class="type">UInt64</span>(offset), is64bit: <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>processThinMachO</code>仅分析二进制的格式是64bit还是32bit，<code>injectDylib</code>用于添加依赖库。首先生成了<code>dylibCmd</code>动态库加载指令，指令中的<code>cmdsize</code>对dylib的路径长度进行了8字节对齐取整。指令插入的位置为Header+CmdsSize之后，即Load Commands最后一条指令之后，这里没有判断是否可以插入。注意，还需要修改Header中的指令数量和大小信息，不然新增的指令不会被解析。</p>
<p>修改完成后，修改后的文件直接覆盖原文件，所以测试前请将原文件备份。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Mach-o</tag>
        <tag>interpose</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS修改MachO文件实现动态库注入（二）</title>
    <url>/2023/06/25/macOS%E4%BF%AE%E6%94%B9MachO%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%BA%93%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p><a class="link"   href="https://conradsun.github.io/2023/06/25/macOS%E4%BF%AE%E6%94%B9MachO%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%BA%93%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/" >前面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>讲解了修改单架构二进制文件实现动态库注入，本篇继续讲解修改胖二进制文件实现动态库注入。注入方式并无不同，不过需要注意修改文件时的地址偏移，否则修改错误会导致文件无法解析。本文所展示的代码片段来自开源项目<a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，更多细节可参考该项目。</p>
<p>如下图，胖二进制包含多种CPU架构，一般是X86_64和ARM64，胖二进制相当于多个单二进制的组合体。使用系统自带的工具lipo可以添加、提取、删除以及替换胖二进制中的某个架构的二进制，这里不多做介绍。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Mach-o-Fat.png"
                      alt="胖二进制格式"
                ></p>
<p>修改胖二进制首先需要解析Fat Header，通过文件头获取所支持的架构数量及各架构描述内容的偏移地址。注意，获取数据时根据机器的大端&#x2F;小端模式不同，需要对数据进行处理。一般PC机都是小端模式，因此需要将高低位地址上的数据进行交换。多架构二进制的修改直接复用了单架构的代码，<code>processThinMachO</code>相关代码请参考上文或<a class="link"   href="https://github.com/ConradSun/FishHook" >FishHook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>项目。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">repackBinary</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> machOData.isEmpty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> machOData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> header <span class="operator">=</span> pointer.bindMemory(to: fat_header.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get fat header pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> offset <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;fat_header&gt;.size</span><br><span class="line">        <span class="keyword">let</span> archNum <span class="operator">=</span> _OSSwapInt32(header.pointee.nfat_arch)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> header.pointee.magic &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">FAT_MAGIC</span>, <span class="type">FAT_CIGAM</span>:</span><br><span class="line">            <span class="keyword">if</span> archNum <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Format of Fat-MachO is invalid.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> archNum &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    offset <span class="operator">=</span> offset <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;fat_arch&gt;.size</span><br><span class="line">                &#125;</span><br><span class="line">                result <span class="operator">=</span> processFatMachO(offset: offset)</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>result &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MH_MAGIC_64</span>, <span class="type">MH_CIGAM_64</span>, <span class="type">MH_MAGIC</span>, <span class="type">MH_CIGAM</span>:</span><br><span class="line">            result <span class="operator">=</span> processThinMachO(offset: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Unknown MachO format.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        signAdhoc()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">processFatMachO</span>(<span class="params">offset</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fatData <span class="operator">=</span> machOData.advanced(by: offset)</span><br><span class="line">    <span class="keyword">return</span> fatData.withUnsafeBytes &#123; pointer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> arch <span class="operator">=</span> pointer.bindMemory(to: fat_arch.<span class="keyword">self</span>).baseAddress <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get fat arch pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> offset <span class="operator">=</span> _OSSwapInt32(arch.pointee.offset)</span><br><span class="line">        <span class="keyword">return</span> processThinMachO(offset: <span class="type">Int</span>(offset))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上文提到，在插入动态库注入指令时并没有判断是否有足够的空白区域容纳，如果空间不足，插入会覆盖有效数据，进而导致二进制格式错误。插入空间判断代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">isSpaceEnough</span>(<span class="params">header</span>: mach_header, <span class="params">offset</span>: <span class="type">Int</span>, <span class="params">is64bit</span>: <span class="type">Bool</span>) -&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pathSize <span class="operator">=</span> (dylibPath.count <span class="operator">&amp;</span> <span class="operator">~</span>(pathPadding <span class="operator">-</span> <span class="number">1</span>)) <span class="operator">+</span> pathPadding</span><br><span class="line">    <span class="keyword">let</span> injectSpace <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;dylib_command&gt;.size <span class="operator">+</span> pathSize</span><br><span class="line">    <span class="keyword">let</span> headerSize <span class="operator">=</span> is64bit <span class="operator">?</span> <span class="type">MemoryLayout</span>&lt;mach_header_64&gt;.size : <span class="type">MemoryLayout</span>&lt;mach_header&gt;.size</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> segOffset <span class="operator">=</span> offset</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> header.ncmds &#123;</span><br><span class="line">        <span class="keyword">let</span> segData <span class="operator">=</span> machOData.subdata(in: segOffset<span class="operator">..&lt;</span>segOffset<span class="operator">+</span><span class="type">MemoryLayout</span>&lt;segment_command_64&gt;.size)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> segCmd <span class="operator">=</span> getSegmentCommand(data: segData) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get segment command pointer.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> segName <span class="operator">=</span> segCmd.segname</span><br><span class="line">        <span class="keyword">if</span> (strncmp(<span class="operator">&amp;</span>segName.<span class="number">0</span>, <span class="string">&quot;__TEXT&quot;</span>, <span class="number">15</span>) <span class="operator">==</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> segCmd.nsects &#123;</span><br><span class="line">                <span class="keyword">let</span> sectOffset <span class="operator">=</span> segOffset <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;segment_command_64&gt;.size <span class="operator">+</span> <span class="type">MemoryLayout</span>&lt;section_64&gt;.size <span class="operator">*</span> <span class="type">Int</span>(i)</span><br><span class="line">                <span class="keyword">let</span> sectData <span class="operator">=</span> machOData.subdata(in: sectOffset<span class="operator">..&lt;</span>sectOffset<span class="operator">+</span><span class="type">MemoryLayout</span>&lt;section_64&gt;.size)</span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> sectCmd <span class="operator">=</span> getSectionCommand(data: sectData) <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to get section pointer.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> sectName <span class="operator">=</span> sectCmd.sectname</span><br><span class="line">                <span class="keyword">if</span> (strncmp(<span class="operator">&amp;</span>sectName.<span class="number">0</span>, <span class="string">&quot;__text&quot;</span>, <span class="number">15</span>) <span class="operator">==</span> <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> space <span class="operator">=</span> sectCmd.offset <span class="operator">-</span> header.sizeofcmds <span class="operator">-</span> <span class="type">UInt32</span>(headerSize)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO] Available space is <span class="subst">\(space<span class="operator">/</span><span class="number">8</span>)</span> bytes.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> space <span class="operator">&gt;</span> injectSpace</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            segOffset <span class="operator">=</span> segOffset <span class="operator">+</span> <span class="type">Int</span>(segCmd.cmdsize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>基本原理是查找到代码段（__text）偏移地址，然后分析该地址前是否有足够空间，读者可结合二进制格式进行代码阅读，这里不再注解。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Mach-o</tag>
        <tag>interpose</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Hook系统调用</title>
    <url>/2023/06/24/macOS%20Hook%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>基于Kauth或者EndpointSecurity框架可以监视系统的各类文件、进程事件，在审计后阻断或放通事件的执行。其中基于内核拓展的方案除了可以阻断执行，还可以修改函数调用参数，进行诸如文件保护、网络隔离等操作。</p>
<p>编写内核拓展较为复杂且可能导致系统崩溃等严重后果。Apple提供了在用户态hook函数调用的机制，使用较为方便，称为动态库注入。动态库注入是dyld加载器提供的功能，通过修改环境变量<code>DYLD_INSERT_LIBRARIES</code>可向二进制注入动态库。注入的动态库需实现函数替换，Apple提供了<a class="link"   href="https://opensource.apple.com/source/dyld/dyld-210.2.3/include/mach-o/dyld-interposing.h" >dyld-interposing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>方法，使用如下。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DYLD_INTERPOSE</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DYLD_INTERPOSE(_replacement,_replacee) \</span></span><br><span class="line"><span class="meta">        __attribute__((used)) static struct&#123; const void* replacement; const void* replacee; &#125; _interpose_##_replacee \</span></span><br><span class="line"><span class="meta">        __attribute__ ((section (<span class="string">&quot;__DATA,__interpose&quot;</span>))) = &#123; (const void*)(unsigned long)&amp;_replacement, (const void*)(unsigned long)&amp;_replacee &#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>该段宏定义的目的是修改MachO文件的DATA区的interpose字段，目的是将原始函数的地址替换为自定义函数地址，dyld在加载动态库时对该地址进行替换。如这里对进程执行的系统调用<code>execve</code>和<code>posix_spawn</code>进行替换，将映像更换为echo，读者可自行查看是否完成替换。注意，调用<code>printf</code>函数不一定可以打印出来，具体原因不太明白，猜测是因为<code>printf</code>属于懒加载函数，注入动态库时该函数地址没有更新，无法调用。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *s_repalce_path = <span class="string">&quot;/bin/echo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fh_execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> *argv, <span class="type">char</span> *<span class="type">const</span> *envp)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[FishHook - execve] pid: %d, process path: %s.&quot;</span>, getpid(), file);</span><br><span class="line">    <span class="keyword">return</span> execve(s_repalce_path, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fh_posix_spawn</span><span class="params">(<span class="type">pid_t</span> *pid, <span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">posix_spawn_file_actions_t</span> *actions, <span class="type">const</span> <span class="type">posix_spawnattr_t</span> *attr, <span class="type">char</span> *<span class="type">const</span> *argv, <span class="type">char</span> *<span class="type">const</span> *envp)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[FishHook - posix_spawn] pid: %d, process path: %s.&quot;</span>, *pid, path);</span><br><span class="line">    <span class="keyword">return</span> posix_spawn(pid, s_repalce_path, actions, attr, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DYLD_INTERPOSE(fh_execve, execve)</span><br><span class="line">DYLD_INTERPOSE(fh_posix_spawn, posix_spawn)</span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，在开启SIP (System Integrity Protection) 机制的机器上，签名的应用程序可能无法继承该环境变量，原因是内核会进行防止可执行文件被修改的检查，可参考Apple官方的<a class="link"   href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/RuntimeProtections/RuntimeProtections.html" >SIP指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>interpose</tag>
        <tag>hook</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS修改MachO文件实现动态库注入（三）</title>
    <url>/2023/06/26/macOS%E4%BF%AE%E6%94%B9MachO%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%BA%93%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>前面讲到如何新增一条<code>LC_LOAD_DYLIB</code>指令到二进制，以注入动态库。这种方式有一定的局限性，因为注入的前提是由于Segment及Section间的内存对齐，存在足够的空白空间可以插入一条动态库依赖指令。如果没有足够的空白空间，则强制添加指令会导致代码段（__text）被覆盖，进而造成二进制打不开或者行为异常的现象。Google Chrome及Microsoft Edge浏览器Bundle内的二进制很多没有足够的空白空间，读者可自行验证。</p>
<p>那么如果没有足够的空白空间插入新的指令，如何注入动态库？一种比较麻烦的方法是人为构造空白空间：将代码段及其后的二进制数据进行后移，增大二进制的文件大小，以留出足够的空间。这种方法难度大，二进制数据偏移后还须进行修正，如各个Segment和Section的起始地址、二进制中表示函数或者其他数据地址的数据、二进制中表示地址偏移的数据等。有的Section数据需要修正，有的不需要；某些Section部分数据需要修正，部分不需要；某些表示偏移大小的数据（需要注意的是这种数据是以uleb128进行编码存储的）修正后其占用的空间变大了，还须单独修正。这里不展开说了。</p>
<p>还有一种更为简单的方法：替换<code>libSystem.B.dylib</code>依赖库。在macOS上，基本所有的Mach-o文件均会依赖<code>libSystem.B.dylib</code>，那么如果把依赖该动态库的加载指令修改为依赖我们自定义的动态库，就不必关心空白空间是否足够了。这需要注意两点：</p>
<blockquote>
<p>1 自定义的依赖库路径不能过长；<br>2 原二进制所使用的来自libSystem.B.dylib的符号需要自定义的依赖库导出。</p>
</blockquote>
<p>第一点目的是避免麻烦。因为字节对齐的原因，<code>/usr/lib/libSystem.B.dylib</code>路径会占用32个字节，如下图所示。所以自定义的依赖库路径长度不要大于31字节，否则需要对后续二进制内容进行偏移。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Interpose-libSystem.B.dylib.png"
                      alt="libSystem.B.dylib占用空间"
                ></p>
<p>修改后的二进制依赖库情况如下图，注入的动态库路径为<code>/usr/local/lib/libinject.dylib</code>，路径长度是30字节。这里所举例的二进制只有一个依赖库，那么注入后能否运行？如果你编写的demo非常简单，简单到没有依赖<code>libSystem.B.dylib</code>的任何符号，那么即使<code>libinject.dylib</code>是个空壳动态库，修改后的二进制也是可以直接运行的。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/article-pics/Interpose-libinject.dylib.png"
                      alt="libSystem.B.dylib加载指令修改后状态"
                ></p>
<p>如果修改的二进制比较复杂，那么修改后直接运行该二进制会崩溃，错误信息如下。日志很直白，<code>dyld</code>在链接阶段寻找<code>helloWorld-mod</code>引用的符号<code>_printf</code>，在依赖库<code>libinject.dylib</code>中没有找到。当然是找不到的，因为<code>_printf</code>符号并不在<code>libinject.dylib</code>导出符号里。这个符号本来是<code>libSystem.B.dylib</code>提供的，但因为我们把依赖库修改了，所以链接器不会去<code>libSystem.B.dylib</code>中查找。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  Debug ./helloWorld-mod                            </span><br><span class="line">dyld[10541]: Symbol not found: _printf</span><br><span class="line">  Referenced from: &lt;9562BD19-769A-3AC8-83FD-7912CDB97807&gt; /Users/....../Build/Products/Debug/helloWorld-mod</span><br><span class="line">  Expected in:     &lt;499C61D6-3325-3E7F-915E-30E2A609A84B&gt; /usr/local/lib/libinject.dylib</span><br><span class="line">[1]    10541 abort      ./helloWorld-mod</span><br></pre></td></tr></table></figure></div>

<p>这就是第二点的注意事项，二进制引用的<code>libSystem.B.dylib</code>的导出符号需要我们自定义的动态库提供。如果修改的二进制的引用符号很简单，直接自己实现一份也可以。但如果引用符号很多，成百上千，而且符号的原型、作用也不清楚，那么只能想办法使用<code>libSystem.B.dylib</code>的导出符号。可执行文件依赖的系统动态库被修改为自定义的动态库<code>libinject.dylib</code>后，如果还想使用<code>libSystem.B.dylib</code>的导出符号，就需要在<code>dyld</code>链接<code>libinject.dylib</code>的时候去链接<code>libSystem.B.dylib</code>。这是完全可行的，因为不止可执行文件，动态库也会依赖<code>libSystem.B.dylib</code>，如下。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ otool -L /usr/local/lib/libinject.dylib </span><br><span class="line">/usr/local/lib/libinject.dylib:</span><br><span class="line">	/usr/local/lib/libinject.dylib (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1336.0.0)</span><br></pre></td></tr></table></figure></div>

<p>所以<code>libinject.dylib</code>可以间接导出符号，即导出的符号自身没有实现，依赖其他库实现。<code>clang</code>编译器可以使用参数<code>exported_symbols_list</code>指定导出符号表，比如这里我们需要<code>libinject.dylib</code>导出<code>_printf</code>符号，可以使用如下命令实现。如需依赖其他库或者符号，可自行添加。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ touch symbols.txt                                                 </span><br><span class="line">➜  ~ echo _printf &gt; ./symbols.txt </span><br><span class="line">➜  ~ clang -dynamiclib -o libinject.dylib -exported_symbols_list ./symbols.txt ./inject.c -lSystem.B</span><br></pre></td></tr></table></figure></div>

<p>此时查看<code>libinject.dylib</code>的导出符号，可以发现<code>_printf</code>符号已被导出。这时再次运行被修改的二进制则可以正常运行。这里使用<code>nm</code>命令打印二进制的引用或导出符号，<code>from libSystem</code>表示符号来源为<code>libSystem.B.dylib</code>，<code>indirect</code>表示符号是间接引用或导出的。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ nm -m ./libinject.dylib</span><br><span class="line">                 (undefined) external _printf (from libSystem)</span><br><span class="line">                 (indirect) external _printf (for _printf)</span><br><span class="line">          </span><br><span class="line">➜  ~ mv ./libinject.dylib /usr/local/lib </span><br><span class="line">➜  ~ ./helloWorld-mod </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></div>

<p>读者可自行查看系统二进制的引用符号，如<code>zsh</code>等，其引用及导出符号相当可观，大部分的引用符号来源<code>libSystem.B.dylib</code>。那么这类二进制修改系统依赖库为自定义动态库，自定义依赖库就需要导出大量符号。如果我将<code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code>等系统目录下的所有的可执行文件都注入一遍，需要解决多少<code>libSystem.B.dylib</code>导出符号？大概是2900+。如果纯靠人工搜集符号，过于浪费时间，可使用如下<code>python</code>脚本搜集符号。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_macho_executable</span>(<span class="params">file_path</span>):</span><br><span class="line">    output = subprocess.check_output([<span class="string">&#x27;file&#x27;</span>, file_path]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Mach-O&#x27;</span> <span class="keyword">in</span> output <span class="keyword">and</span> <span class="string">&#x27;executable&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_symbols</span>(<span class="params">binary_path, x86_symbol_file_path, arm_symbol_file_path</span>):</span><br><span class="line">    nm_output = subprocess.check_output([<span class="string">&#x27;nm&#x27;</span>, <span class="string">&#x27;-m&#x27;</span>, binary_path])</span><br><span class="line">    x86_symbols = <span class="built_in">set</span>()</span><br><span class="line">    arm_symbols = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    lines = nm_output.decode().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    size = <span class="built_in">len</span>(lines)</span><br><span class="line">    <span class="keyword">while</span> i &lt; size:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27; (for architecture x86_64)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; size <span class="keyword">and</span> <span class="string">&#x27; architecture&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                    symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                    x86_symbols.add(symbol)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27; (for architecture arm64e)&#x27;</span> <span class="keyword">in</span> lines[i] <span class="keyword">or</span> <span class="string">&#x27; (for architecture arm64)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; size <span class="keyword">and</span> <span class="string">&#x27; architecture&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                    symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                    arm_symbols.add(symbol)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27; (from libSystem)&#x27;</span> <span class="keyword">in</span> lines[i]:</span><br><span class="line">                symbol = lines[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">19</span>]</span><br><span class="line">                x86_symbols.add(symbol)</span><br><span class="line">                arm_symbols.add(symbol)</span><br><span class="line"></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(x86_symbol_file_path, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        existing_symbols = <span class="built_in">set</span>(line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">        new_symbols = existing_symbols | x86_symbols</span><br><span class="line">        f.seek(<span class="number">0</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">sorted</span>(new_symbols):</span><br><span class="line">            f.write(line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(arm_symbol_file_path, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        existing_symbols = <span class="built_in">set</span>(line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">        new_symbols =  existing_symbols | arm_symbols</span><br><span class="line">        f.seek(<span class="number">0</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">sorted</span>(new_symbols):</span><br><span class="line">            f.write(line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage: python collect_symbols.py &lt;binary_path&gt; &lt;x86_symbol_file_path&gt; &lt;arm_symbol_file_path&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    x86_symbol_file_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">    arm_symbol_file_path = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                binary_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">if</span> is_macho_executable(binary_path):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;dump symbols for file &quot;</span>, binary_path)</span><br><span class="line">                    collect_symbols(binary_path, x86_symbol_file_path, arm_symbol_file_path)</span><br><span class="line">    <span class="keyword">elif</span> is_macho_executable(path):</span><br><span class="line">        collect_symbols(path, x86_symbol_file_path, arm_symbol_file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid binary path&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Mach-o</tag>
        <tag>interpose</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS内核拓展与用户态进程的通信实现（一）</title>
    <url>/2023/06/21/macOS%E5%86%85%E6%A0%B8%E6%8B%93%E5%B1%95%E4%B8%8E%E7%94%A8%E6%88%B7%E6%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>macOS内核拓展与用户态进程通信基本依靠<a class="link"   href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/NKEConceptual/control/control.html#//apple_ref/doc/uid/TP40001858-CH227-DontLinkElementID_35" >KernControl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> API及<a class="link"   href="https://developer.apple.com/documentation/kernel/iokit_fundamentals" >IOKit Fundamentals <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 框架。kern_control API对socket进行简单封装，用户态进程调用<code>connect</code>建立与内核的通信机制。IOKit则不仅提供用户态通信接口，实际上IOKit提供所有内核驱动的管控能力，包含驱动的注册、资源管理和调试等。</p>
<h2 id="KernControl内核编程"><a href="#KernControl内核编程" class="headerlink" title="KernControl内核编程"></a>KernControl内核编程</h2><p>内核拓展需调用<code>ctl_register</code>进行控制器的注册。函数原型为：<code> errno_t ctl_register(struct kern_ctl_reg *userkctl, kern_ctl_ref *kctlref);</code>。其中<code>userkctl</code>存放控制器相关配置，<code>kctlref</code>用于后续的消息发送和最后的控制器注销。消息传输调用<code>ctl_enqueuedata</code>实现，函数原型为<code>errno_t ctl_enqueuedata(kern_ctl_ref kctlref, u_int32_t unit, void *data, size_t len, u_int32_t flags);</code>。需要注意的是数据传输使用到的<code>unit</code>需在连接建立时获取，详见下面<code>kext_connect</code>函数实现。<br><code>kern_ctl_reg</code>结构体包含数据分发相关的函数指针，需自行实现。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Kext管控运行时环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kern_ctl_reg</span> <span class="title">kctl_register</span>;</span>      <span class="comment">// kext注册器</span></span><br><span class="line">    kern_ctl_ref kctl_refrance;             <span class="comment">// kext注册引用</span></span><br><span class="line">    <span class="type">uint8_t</span> kext_unit;                      <span class="comment">// kext单元号</span></span><br><span class="line">    <span class="type">bool</span> is_connected;                      <span class="comment">// kext连接状态</span></span><br><span class="line">&#125; KextControlEnv;</span><br><span class="line">KextControlEnv g_kext_ctl;                      <span class="comment">// 内核拓展控制器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   kext控制器初始化</span></span><br><span class="line"><span class="comment"> * @return  错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_control_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> error = KERN_SUCCESS;</span><br><span class="line">    bzero(&amp;g_kext_ctl, <span class="keyword">sizeof</span>(KextControlEnv));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化kext管控参数</span></span><br><span class="line">    strlcpy(g_kext_ctl.kctl_register.ctl_name, <span class="string">&quot;your kext name&quot;</span>, MAX_KCTL_NAME);</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_flags = CTL_FLAG_PRIVILEGED;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_send = kext_send;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_getopt = sock_get_opt;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_setopt = sock_set_opt;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_connect = kext_connect;</span><br><span class="line">    g_kext_ctl.kctl_register.ctl_disconnect = kext_disconnect;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册kext控制器</span></span><br><span class="line">    error = ctl_register(&amp;g_kext_ctl.kctl_register, &amp;g_kext_ctl.kctl_refrance);</span><br><span class="line">    <span class="keyword">if</span> (error != KERN_SUCCESS) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to register kext controller with error code [%d].&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   kext控制器反初始化</span></span><br><span class="line"><span class="comment"> * @return  错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_control_uninit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> error = KERN_SUCCESS;</span><br><span class="line">    </span><br><span class="line">    error = ctl_deregister(g_kext_ctl.kctl_refrance);</span><br><span class="line">    <span class="keyword">if</span> (error != KERN_SUCCESS) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to deregister kext controller with error code [%d].&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端设置配置回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @param command   操作标志</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">sock_set_opt</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *info, <span class="type">int</span> command, <span class="type">void</span> *data, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> err_code = KERN_SUCCESS;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> err_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端获取配置回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @param opt       操作标志</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">sock_get_opt</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *userdata, <span class="type">int</span> opt, <span class="type">void</span> *data, <span class="type">size_t</span> *len)</span> &#123;</span><br><span class="line">    <span class="comment">// 可不用实现</span></span><br><span class="line">    <span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端连接回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param sac       套接字地址控制器</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_connect</span><span class="params">(kern_ctl_ref ctlref, <span class="keyword">struct</span> sockaddr_ctl *sac, <span class="type">void</span> **unitinfo)</span> &#123;</span><br><span class="line">    <span class="type">errno_t</span> err_code = KERN_SUCCESS;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (g_kext_ctl.is_connected == <span class="literal">true</span>) &#123;</span><br><span class="line">        LOG_C(LOG_ERROR, <span class="string">&quot;Failed to accept the connection request for a connection already established.&quot;</span>);</span><br><span class="line">        err_code = EISCONN;</span><br><span class="line">        <span class="keyword">return</span> err_code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_kext_ctl.is_connected = <span class="literal">true</span>;</span><br><span class="line">    g_kext_ctl.kext_unit = sac-&gt;sc_unit;</span><br><span class="line">    LOG_C(LOG_INFO, <span class="string">&quot;Connect with client successfully.&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> err_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           客户端断开连接回调</span></span><br><span class="line"><span class="comment"> * @param ctlref    kext控制引用</span></span><br><span class="line"><span class="comment"> * @param unit      kext单元号</span></span><br><span class="line"><span class="comment"> * @return          错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">kext_disconnect</span><span class="params">(kern_ctl_ref ctlref, <span class="type">unsigned</span> <span class="type">int</span> unit, <span class="type">void</span> *unitinfo)</span> &#123;</span><br><span class="line">    g_kext_ctl.is_connected = <span class="literal">false</span>;</span><br><span class="line">    LOG_C(LOG_INFO, <span class="string">&quot;Disconnect with peer successfully.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="KernControl用户态编程"><a href="#KernControl用户态编程" class="headerlink" title="KernControl用户态编程"></a>KernControl用户态编程</h2><p>用户态进程仅需调用<code>connect</code>函数发起连接，代码如下。OS X专门为内核通信定义了<code>PF_SYSTEM</code>域，该域支持<code>SYSPROTO_CONTROL</code>和<code>SYSPROTO_EVENT</code>两个协议。使用<code>SYSPROTO_CONTROL</code>协议的内核控制（kern_control）API允许应用程序配置和控制KEXT。使用<code>SYSPROTO_EVENT</code>协议的内核事件（kern_event）API允许在某些内核事件发生时通知应用程序和其他KEXT。一般来说，内核控制API是首选，因为它提供双向通信。</p>
<div class="highlight-container" data-rel="Objc"><figure class="iseeu highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  连接内核拓展</span></span><br><span class="line"><span class="comment"> * @return NO表示失败，否则成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">BOOL</span>)establishConnection &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.socketFD != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建kext管控套接字</span></span><br><span class="line">    _socketFD = socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.socketFD == <span class="number">-1</span>) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Could not create socket.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化kext控制信息</span></span><br><span class="line">    <span class="keyword">struct</span> ctl_info info;</span><br><span class="line">    bzero(&amp;info, <span class="keyword">sizeof</span>(info));</span><br><span class="line">    strlcpy(info.ctl_name, <span class="string">&quot;your kext name&quot;</span>, MAX_KCTL_NAME);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取动态设置的kext ID</span></span><br><span class="line">    <span class="keyword">if</span> (ioctl(<span class="keyword">self</span>.socketFD, <span class="built_in">CTLIOCGINFO</span>, &amp;info)) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Could not get ID for kernel control.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化套接字连接地址</span></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_ctl addr;</span><br><span class="line">    bzero(&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sc_len = <span class="keyword">sizeof</span>(addr);</span><br><span class="line">    addr.sc_family = AF_SYSTEM;</span><br><span class="line">    addr.ss_sysaddr = AF_SYS_CONTROL;</span><br><span class="line">    addr.sc_id = info.ctl_id;</span><br><span class="line">    addr.sc_unit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = connect(<span class="keyword">self</span>.socketFD, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        LOG_OC(LOG_ERROR, <span class="string">&quot;Connect failed with error code [%d].&quot;</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG_OC(LOG_INFO, <span class="string">&quot;Connect with kext successfully.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 断开内核拓展连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)destroyConnection &#123;</span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    close(<span class="keyword">self</span>.socketFD);</span><br><span class="line">    _socketFD = <span class="number">-1</span>;</span><br><span class="line">    LOG_OC(LOG_INFO, <span class="string">&quot;Disconnect with kext successfully.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>内核通信</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS内核拓展与用户态进程的通信实现（二）</title>
    <url>/2023/06/21/macOS%E5%86%85%E6%A0%B8%E6%8B%93%E5%B1%95%E4%B8%8E%E7%94%A8%E6%88%B7%E6%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p><a class="link"   href="https://conradsun.github.io/2023/06/21/macOS%E5%86%85%E6%A0%B8%E6%8B%93%E5%B1%95%E4%B8%8E%E7%94%A8%E6%88%B7%E6%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/" >前面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已经讲解了基于KernControl API的通信实现，该实现相对简单，但有一些缺点。内核向应用层传输消息需调用<code>ctl_enqueuedata</code>接口，该接口实际将数据缓存至缓冲区，当需要瞬时大量传输消息时，缓冲区容量有限，将丢弃后来的数据。如果传输的数据有优先级，则需对<code>ctl_enqueuedata</code>接口进行二次封装，避免高优先级数据丢失。</p>
<p><a class="link"   href="https://developer.apple.com/documentation/kernel/iokit_fundamentals" >IOKit Fundamentals <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 框架提供更加全面且方便的内核驱动API。<a class="link"   href="https://developer.apple.com/documentation/kernel/ioservice-1g" >IOService <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是大多数内核驱动的基类，提供驱动实例化相关的各项服务。<a class="link"   href="https://developer.apple.com/documentation/kernel/iouserclient" >IOUserClient <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是与用户态应用程序间通信的基类，通过继承并实现该类，可与客户端应用程序建立通信机制。<a class="link"   href="https://developer.apple.com/documentation/kernel/ioshareddataqueue" >IOSharedDataQueue <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是非常便于使用的内核与用户态进程进行数据交换的通用队列，用户可自行设置队列大小。基于IOKit中的IOService、IOUserClient、IOSharedDataQueue可方便的实现内核与用户进程的通信和数据传输。下面结合代码进行简单实现，更多代码细节和工程配置可参考<a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>项目。</p>
<h2 id="IOService内核编程"><a href="#IOService内核编程" class="headerlink" title="IOService内核编程"></a>IOService内核编程</h2><p>由于本次编写的为内核拓展，仅需要IOService进行驱动的加载与卸载管理，这里的代码实现很简单，仅需重写start、stop方法。如有加载卸载时的自定义操作可在函数中实现。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">DriverService.hpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriverService</span> : <span class="keyword">public</span> IOService &#123;</span><br><span class="line">    <span class="built_in">OSDeclareDefaultStructors</span>(DriverService);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Called by the kernel when the kext is loaded</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called by the kernel when the kext is unloaded</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearInstances</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="IOUserClient内核编程"><a href="#IOUserClient内核编程" class="headerlink" title="IOUserClient内核编程"></a>IOUserClient内核编程</h2><p>编写继承于IOUserClient的类后需重写如下方法，相关源文件实现请参考开源项目。<code>registerNotificationPort</code>和<code>clientMemoryForType</code>用于数据交换队列的配置，<code>externalMethod</code>配置对外函数调用接口，对外接口的函数原型如<code>callYourMethod</code>定义。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">DriverClient.hpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriverClient</span> : <span class="keyword">public</span> IOUserClient &#123;</span><br><span class="line">    <span class="built_in">OSDeclareDefaultStructors</span>(DriverClient);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Called as part of IOServiceOpen in clients.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithTask</span><span class="params">(<span class="type">task_t</span> owningTask, <span class="type">void</span> *securityID, UInt32 type)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called after initWithTask as part of IOServiceOpen.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when this class is stopping.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">(IOService *provider)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when a client manually disconnects (via IOServiceClose).</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientClose</span><span class="params">(<span class="type">void</span>)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when a client dies.</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientDied</span><span class="params">(<span class="type">void</span>)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called during termination.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">didTerminate</span><span class="params">(IOService *provider, IOOptionBits options, <span class="type">bool</span> *defer)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectSetNotificationPort. 用于数据传输</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">registerNotificationPort</span><span class="params">(<span class="type">mach_port_t</span> port, UInt32 type, UInt32 refCon)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectMapMemory. 用于数据传输</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">clientMemoryForType</span><span class="params">(UInt32 type, IOOptionBits *options, IOMemoryDescriptor **memory)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called in clients with IOConnectCallScalarMethod. 设置对外通信调用接口</span></span><br><span class="line">    <span class="function">IOReturn <span class="title">externalMethod</span><span class="params">(UInt32 selector, IOExternalMethodArguments *arguments, IOExternalMethodDispatch *dispatch, OSObject *target, <span class="type">void</span> *reference)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义对外调用方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> IOReturn <span class="title">callYourMethod</span><span class="params">(OSObject *target, <span class="type">void</span> *reference, IOExternalMethodArguments *arguments)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="IOKit客户端编程"><a href="#IOKit客户端编程" class="headerlink" title="IOKit客户端编程"></a>IOKit客户端编程</h2><p>连接内核拓展前需先进行加载，加载调用<code>KextManagerLoadKextWithIdentifier</code>或<code>KextManagerLoadKextWithURL</code>即可。内核拓展需在plist中配置<code>IOService</code>及<code>IOUserClient</code>类名，在拓展启动后可通过类名进行查找匹配。首先需查找注册了指定类名的内核驱动，代码如下：</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">startProvider</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> service <span class="operator">=</span> <span class="type">IOServiceMatching</span>(<span class="string">&quot;your service name&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Wait for kext to be connected.&quot;</span>)</span><br><span class="line">    waitForDriver(matchingDict: service)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>service存放匹配成功的驱动字典，然后需要创建通信端口和处理队列进行处理连接请求。处理连接请求时所持有的IOService对象需注意释放。调用<code>IOServiceOpen</code>接口即可建立连接，后面的<code>IOConnectCallScalarMethod</code>表示调用驱动对外接口进行连接测试。函数返回前需将用于连接请求处理的端口释放。通过<code>IOConnectCallScalarMethod或IOConnectCallStructMethod</code>可调用驱动对外接口，其中<code>ScalarMethod</code>仅可传输有限数量的常量，<code>StructMethod</code>则可传输自定义结构体类型，相关驱动配置可参照NuwaStone项目。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">processConnectionRequest</span>(<span class="params">iterator</span>: io_iterator_t) &#123;</span><br><span class="line">    <span class="keyword">repeat</span> &#123;</span><br><span class="line">        <span class="comment">// 持有的对象需进行释放</span></span><br><span class="line">        <span class="keyword">let</span> nextService <span class="operator">=</span> <span class="type">IOIteratorNext</span>(iterator)</span><br><span class="line">        <span class="keyword">guard</span> nextService <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 建立与内核驱动的连接</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="type">IOServiceOpen</span>(nextService, mach_task_self_, <span class="number">0</span>, <span class="operator">&amp;</span>connection)</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">!=</span> kIOReturnSuccess &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to open kext service [<span class="subst">\(String.<span class="keyword">init</span>(format: <span class="string">&quot;0x%x&quot;</span>, result))</span>].&quot;</span>)</span><br><span class="line">            <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用驱动方法测试连接</span></span><br><span class="line">        result <span class="operator">=</span> <span class="type">IOConnectCallScalarMethod</span>(connection, kNuwaUserClientOpen.rawValue, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">!=</span> kIOReturnSuccess &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;An error occurred while opening the connection [<span class="subst">\(result)</span>].&quot;</span>)</span><br><span class="line">            <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">IOObjectRelease</span>(nextService)</span><br><span class="line">        <span class="type">IONotificationPortDestroy</span>(notificationPort)</span><br><span class="line">        isConnected <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Connected with kext successfully.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">waitForDriver</span>(<span class="params">matchingDict</span>: <span class="type">CFDictionary</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> iterator: io_iterator_t <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> selfPointer <span class="operator">=</span> <span class="type">Unmanaged</span>.passUnretained(<span class="keyword">self</span>).toOpaque()</span><br><span class="line">    <span class="keyword">let</span> notificationQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;your queue name&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> appearedCallback: <span class="type">IOServiceMatchingCallback</span> <span class="operator">=</span> &#123; refcon, iterator <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> selfPtr <span class="operator">=</span> <span class="type">Unmanaged</span>&lt;<span class="type">YourClassName</span>&gt;.fromOpaque(refcon<span class="operator">!</span>).takeUnretainedValue()</span><br><span class="line">        selfPtr.processConnectionRequest(iterator: iterator)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    notificationPort <span class="operator">=</span> <span class="type">IONotificationPortCreate</span>(kIOMasterPortDefault)</span><br><span class="line">    <span class="type">IONotificationPortSetDispatchQueue</span>(notificationPort, notificationQueue)</span><br><span class="line">    <span class="type">IOServiceAddMatchingNotification</span>(notificationPort, kIOMatchedNotification, matchingDict, appearedCallback, selfPointer, <span class="operator">&amp;</span>iterator)</span><br><span class="line">    processConnectionRequest(iterator: iterator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们通过调用<code>IOServiceOpen</code>存放<code>io_connect_t</code>类型的对象建立了与内核驱动的连接，相应的，断开连接时需调用<code>IOServiceClose</code>接口。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">stopProvider</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">IOServiceClose</span>(connection)</span><br><span class="line">    <span class="keyword">if</span> result <span class="operator">!=</span> <span class="type">KERN_SUCCESS</span> &#123;</span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to close IOService [<span class="subst">\(String.<span class="keyword">init</span>(format: <span class="string">&quot;0x%x&quot;</span>, result))</span>].&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    connection <span class="operator">=</span> <span class="type">IO_OBJECT_NULL</span></span><br><span class="line">    isConnected <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>内核通信</tag>
        <tag>IOService</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS用户态进程间的通信实现</title>
    <url>/2023/06/23/macOS%E7%94%A8%E6%88%B7%E6%80%81%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>macOS内核与用户态进程的通信前面已经讲解过了，用户态进程间通信较为简单，Apple官方推荐使用<a class="link"   href="https://developer.apple.com/documentation/xpc" >XPC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>机制。XPC有底层的C API，也有封装后的上层的objc和swift API，可以实现像调用自身进程的接口一样调用对端的暴露接口。这里以swift为例说明XPC的代码实现。开源项目<a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>用户态进程间通信均基于XPC实现，更多代码细节可参考该项目。</p>
<h2 id="对外接口及类定义"><a href="#对外接口及类定义" class="headerlink" title="对外接口及类定义"></a>对外接口及类定义</h2><p>使用XPC需新建两个协议，作为自身进程和对端进程的通信接口，然后新建一个处理XPC连接请求的类，注意需继承NSObject，以便实现XPC系统调用所需的代理接口。注意，为了方便XPCConnection类是自身进程与对端进程共用的，但部分方法是不能共用的，详细见注释。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端进程协议</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">ClientXPCProtocol</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端进程协议</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">ServerXPCProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">connectResponse</span>(<span class="keyword">_</span> <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接请求处理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XPCConnection</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">XPCConnection</span>()</span><br><span class="line">    <span class="keyword">var</span> listener: <span class="type">NSXPCListener</span>?</span><br><span class="line">    <span class="comment">// 连接处理对象</span></span><br><span class="line">    <span class="keyword">var</span> connection: <span class="type">NSXPCConnection</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">getMachServiceName</span>(<span class="params">from</span> <span class="params">bundle</span>: <span class="type">Bundle</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> clientKeys <span class="operator">=</span> bundle.object(forInfoDictionaryKey: <span class="type">ClientName</span>) <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>]</span><br><span class="line">        <span class="keyword">let</span> machServiceName <span class="operator">=</span> clientKeys<span class="operator">?</span>[<span class="type">MachServiceKey</span>] <span class="keyword">as?</span> <span class="type">String</span></span><br><span class="line">        <span class="keyword">return</span> machServiceName <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 仅服务端进程调用</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">startListener</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> newListener <span class="operator">=</span> <span class="type">NSXPCListener</span>(machServiceName: <span class="string">&quot;your service name&quot;</span>)</span><br><span class="line">        newListener.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        newListener.resume()</span><br><span class="line">        listener <span class="operator">=</span> newListener</span><br><span class="line">        <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Start XPC listener successfully.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 仅客户端进程调用</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">connectToServer</span>(<span class="params">bundle</span>: <span class="type">Bundle</span>, <span class="params">delegate</span>: <span class="type">ClientXPCProtocol</span>, <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> connection <span class="operator">==</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client already connected.&quot;</span>)</span><br><span class="line">            handler(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> getMachServiceName(from: bundle) <span class="operator">==</span> <span class="type">ClientBundle</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            handler(<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> newConnection <span class="operator">=</span> <span class="type">NSXPCConnection</span>(machServiceName: <span class="type">DaemonBundle</span>)</span><br><span class="line">        newConnection.exportedObject <span class="operator">=</span> delegate</span><br><span class="line">        newConnection.exportedInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">ClientXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.remoteObjectInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">DaemonXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        connection <span class="operator">=</span> newConnection</span><br><span class="line">        newConnection.resume()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> proxy <span class="operator">=</span> newConnection.remoteObjectProxyWithErrorHandler &#123; error <span class="keyword">in</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Error</span>, <span class="string">&quot;Failed to connect with error [<span class="subst">\(error)</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">self</span>.connection<span class="operator">?</span>.invalidate()</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            handler(<span class="literal">false</span>)</span><br><span class="line">        &#125; <span class="keyword">as?</span> <span class="type">DaemonXPCProtocol</span></span><br><span class="line">        </span><br><span class="line">        proxy<span class="operator">?</span>.connectResponse(handler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>XPC的代码实现是较为简单的，<code>startListener</code>函数首先需创建连接所用的Mach端口，网络资源在Mac内核基本抽象为Mach端口资源，然后设置处理连接请求的代理为自身类，后面需编写请求处理代码以校验连接并建立连接。<code>connectToServer</code>函数首先判断是否连接已建立，然后简单校验了一下APP包名。创建连接对象时需设置自身暴露接口和远程调用接口，设置完成后所调用的<code>connectResponse</code>为连接测试函数。在调用远程接口前均需获取<code>remoteObjectProxy</code>远程对象代理，这里需进行错误处理，如果出错则表示连接断开。</p>
<h2 id="XPC连接请求系统调用代理接口"><a href="#XPC连接请求系统调用代理接口" class="headerlink" title="XPC连接请求系统调用代理接口"></a>XPC连接请求系统调用代理接口</h2><p><code>startListener</code>函数中设置处理连接请求的代理为自身类，所以类需要实现代理方法，代理方法的实现很简单，仅需实现下面一种方法。函数内的实现看起来与<code>connectToServer</code>差不多，不过多了错误处理机制。建立连接前可以进行签名校验以增强安全性。这里的<code>invalidationHandler</code>被系统调用时表明连接正常断开，<code>interruptionHandler</code>被系统调用时表明连接意外断开，如果有断开重连要求可以加在这里。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">XPCConnection</span>: <span class="title class_">NSXPCListenerDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">listener</span>(<span class="keyword">_</span> <span class="params">listener</span>: <span class="type">NSXPCListener</span>, <span class="params">shouldAcceptNewConnection</span> <span class="params">newConnection</span>: <span class="type">NSXPCConnection</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        newConnection.exportedObject <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        newConnection.exportedInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">DaemonXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.remoteObjectInterface <span class="operator">=</span> <span class="type">NSXPCInterface</span>(with: <span class="type">ClientXPCProtocol</span>.<span class="keyword">self</span>)</span><br><span class="line">        newConnection.invalidationHandler <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client disconnected.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        newConnection.interruptionHandler <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.connection <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            <span class="type">Logger</span>(.<span class="type">Info</span>, <span class="string">&quot;Client interrupted.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        connection <span class="operator">=</span> newConnection</span><br><span class="line">        newConnection.resume()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="服务端对外暴露接口"><a href="#服务端对外暴露接口" class="headerlink" title="服务端对外暴露接口"></a>服务端对外暴露接口</h2><p>暴露接口根据自己的项目需要自行设计实现就好，但要注意这些接口是无返回值的，毕竟是远程调用，基本也不会需要返回值。这里使用<code>@escaping</code>修饰代码块，表示代码块的调用可能在函数返回后。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension XPCConnection: DaemonXPCProtocol &#123;</span><br><span class="line">    func connectResponse(_ handler: @escaping (Bool) -&gt; Void) &#123;</span><br><span class="line">        Logger(.Info, &quot;Client connected.&quot;)</span><br><span class="line">        handler(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>进程间通信</tag>
        <tag>XPC</tag>
      </tags>
  </entry>
</search>
