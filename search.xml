<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>macOS应用程序坞和菜单栏设置</title>
    <url>/2023/07f5dbd820.html</url>
    <content><![CDATA[<p>和Windows操作系统有所不同的是，macOS中多数应用程序关闭窗口后并不会退出，程序坞（Dock）还会显示该应用的图标，图标下的黑点也表示该应用处于打开状态。造成这种差异的原因是Windows使用的是Single Document Interface（SDI）式 GUI ，应用、窗口和文档具有一对一的关系；而macOS使用的是Multiple Document Interface（MDI）式 GUI，应用、窗体、文档具有一对多的关系。macOS作为更古老的操作系统，在早期计算机算力不强时使用MDI可减少应用启动关闭造成的资源消耗。更多细节可阅读<a class="link"   href="https://www.zhihu.com/question/21143701" >知乎问答 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。本文展示的代码片段出自开源项目<a class="link"   href="https://github.com/ConradSun/NuwaStone" >NuwaStone <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，如需了解更多细节可参考该项目。</p>
<p>使用Xcode默认创建的app便是MDI，虽然窗体关闭后应用并未退出，但点击程序坞应用图标并不会重新显示窗体，如需实现该功能需重写<code>AppDelegate</code>类的相关函数，代码如下。入参中的<code>flag</code>表示当前窗体是否关闭，如果关闭需查找当前系统所持有的窗体，将其置于前台。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">applicationShouldHandleReopen</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSApplication</span>, <span class="params">hasVisibleWindows</span> <span class="params">flag</span>: <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> window <span class="operator">=</span> getMainWindow(sender) &#123;</span><br><span class="line">        window.makeKeyAndOrderFront(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getMainWindow</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">NSApplication</span>) -&gt; <span class="type">NSWindow</span>? &#123;</span><br><span class="line">    <span class="keyword">for</span> window: <span class="type">AnyObject</span> <span class="keyword">in</span> sender.windows &#123;</span><br><span class="line">        <span class="keyword">if</span> window.frameAutosaveName <span class="operator">==</span> <span class="string">&quot;Your Window Name&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> window <span class="keyword">as?</span> <span class="type">NSWindow</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果不想在程序坞显示应用图标，也是修改<code>AppDelegate</code>文件。<code>NSApp.setActivationPolicy</code>API可以很方便的设置应用状态，状态分为<code>regular</code>、<code>accessory</code>、<code>prohibited</code>。简单来说分别表示正常显示图标和窗口、不在Dock栏显示图标、不显示图标和窗口。这里展示的代码图标和窗体状态同步，如果隐藏图标，窗体也一同关闭。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">hideDockIcon</span>() &#123;</span><br><span class="line">    <span class="type">NSApp</span>.setActivationPolicy(.accessory)</span><br><span class="line">    getMainWindow(<span class="type">NSApplication</span>.shared)<span class="operator">?</span>.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">showDockIcon</span>() &#123;</span><br><span class="line">    <span class="type">NSApp</span>.setActivationPolicy(.regular)</span><br><span class="line">    <span class="type">NSApp</span>.activate(ignoringOtherApps: <span class="literal">true</span>)</span><br><span class="line">    getMainWindow(<span class="type">NSApplication</span>.shared)<span class="operator">?</span>.makeKeyAndOrderFront(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>有些应用在桌面右上角会提供常驻的菜单，例如系统输入法、控制中心等。如果需要设置该功能，也是修改<code>AppDelegate</code>文件。这里为右上角的菜单栏添加了后台运行、显示窗体、关闭应用三个功能。<code>button.toolTip</code>是指鼠标停靠在菜单栏图标上时显示的提示信息，如果不设置则没有提示。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setupMenuBar</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> statusMenu <span class="operator">=</span> <span class="type">NSMenu</span>()</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Run in Background&quot;</span>, action: <span class="keyword">#selector</span>(hideDockIcon), keyEquivalent: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Show App Window&quot;</span>, action: <span class="keyword">#selector</span>(showDockIcon), keyEquivalent: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    statusMenu.addItem(withTitle: <span class="string">&quot;Quit&quot;</span>, action: <span class="keyword">#selector</span>(<span class="type">NSApplication</span>.terminate(<span class="keyword">_</span>:)), keyEquivalent: <span class="string">&quot;q&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    menuBar.button<span class="operator">!</span>.image <span class="operator">=</span> <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(<span class="string">&quot;Your Menu Icon Name&quot;</span>))</span><br><span class="line">    menuBar.button<span class="operator">!</span>.toolTip <span class="operator">=</span> <span class="string">&quot;Your Tip Name&quot;</span></span><br><span class="line">    menuBar.menu <span class="operator">=</span> statusMenu</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>macOS开发</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>程序坞</tag>
        <tag>菜单栏</tag>
        <tag>窗体</tag>
      </tags>
  </entry>
</search>
